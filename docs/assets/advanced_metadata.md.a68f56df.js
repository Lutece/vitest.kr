import{_ as s,j as a,k as n,V as l}from"./chunks/framework.8939a477.js";const B=JSON.parse('{"title":"Task Metadata","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/metadata.md","filePath":"advanced/metadata.md","lastUpdated":1690470465000}'),o={name:"advanced/metadata.md"},p=l(`<h1 id="task-metadata" tabindex="-1">Task Metadata <a class="header-anchor" href="#task-metadata" aria-label="Permalink to &quot;Task Metadata&quot;">â€‹</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Vitest exposes experimental private API. Breaking changes might not follow semver, please pin Vitest&#39;s version when using it.</p></div><p>If you are developing a custom reporter or using Vitest Node.js API, you might find it useful to pass data from tests that are being executed in various contexts to your reporter or custom Vitest handler.</p><p>To accomplish this, relying on the <a href="/vitest.kr/guide/test-context.html">test context</a> is not feasible since it cannot be serialized. However, with Vitest, you can utilize the <code>meta</code> property available on every task (suite or test) to share data between your tests and the Node.js process. It&#39;s important to note that this communication is one-way only, as the <code>meta</code> property can only be modified from within the test context. Any changes made within the Node.js context will not be visible in your tests.</p><p>You can populate <code>meta</code> property on test context or inside <code>beforeAll</code>/<code>afterAll</code> hooks for suite tasks.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">afterAll</span><span style="color:#666666;">((</span><span style="color:#BD976A;">suite</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">suite</span><span style="color:#666666;">.</span><span style="color:#BD976A;">meta</span><span style="color:#666666;">.</span><span style="color:#BD976A;">done</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span></span>
<span class="line"><span style="color:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">custom</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">({</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">task</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">})</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">task</span><span style="color:#666666;">.</span><span style="color:#BD976A;">meta</span><span style="color:#666666;">.</span><span style="color:#BD976A;">custom</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">some-custom-handler</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">afterAll</span><span style="color:#999999;">((</span><span style="color:#B07D48;">suite</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">suite</span><span style="color:#999999;">.</span><span style="color:#B07D48;">meta</span><span style="color:#999999;">.</span><span style="color:#B07D48;">done</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">custom</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">task</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">task</span><span style="color:#999999;">.</span><span style="color:#B07D48;">meta</span><span style="color:#999999;">.</span><span style="color:#B07D48;">custom</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">some-custom-handler</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>Once a test is completed, Vitest will send a task including the result and <code>meta</code> to the Node.js process using RPC. To intercept and process this task, you can utilize the <code>onTaskUpdate</code> method available in your reporter implementation:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// custom-reporter.js</span></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// you can intercept packs if needed</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#80A665;">onTaskUpdate</span><span style="color:#666666;">(</span><span style="color:#BD976A;">packs</span><span style="color:#666666;">) {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#CB7676;">const </span><span style="color:#666666;">[</span><span style="color:#BD976A;">id</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">result</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">meta</span><span style="color:#666666;">]</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">packs</span><span style="color:#666666;">[</span><span style="color:#4C9A91;">0</span><span style="color:#666666;">]</span></span>
<span class="line"><span style="color:#666666;">  },</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// meta is located on every task inside &quot;onFinished&quot;</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#80A665;">onFinished</span><span style="color:#666666;">(</span><span style="color:#BD976A;">files</span><span style="color:#666666;">) {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#BD976A;">files</span><span style="color:#666666;">[</span><span style="color:#4C9A91;">0</span><span style="color:#666666;">].</span><span style="color:#BD976A;">meta</span><span style="color:#666666;">.</span><span style="color:#BD976A;">done</span><span style="color:#666666;"> </span><span style="color:#CB7676;">===</span><span style="color:#666666;"> </span><span style="color:#4D9375;">true</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#BD976A;">files</span><span style="color:#666666;">[</span><span style="color:#4C9A91;">0</span><span style="color:#666666;">].</span><span style="color:#BD976A;">tasks</span><span style="color:#666666;">[</span><span style="color:#4C9A91;">0</span><span style="color:#666666;">].</span><span style="color:#BD976A;">meta</span><span style="color:#666666;">.</span><span style="color:#BD976A;">custom</span><span style="color:#666666;"> </span><span style="color:#CB7676;">===</span><span style="color:#666666;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">some-custom-handler</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="color:#666666;">  }</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// custom-reporter.js</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// you can intercept packs if needed</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">onTaskUpdate</span><span style="color:#999999;">(</span><span style="color:#B07D48;">packs</span><span style="color:#999999;">) {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#AB5959;">const </span><span style="color:#999999;">[</span><span style="color:#B07D48;">id</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">result</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">meta</span><span style="color:#999999;">]</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">packs</span><span style="color:#999999;">[</span><span style="color:#2F798A;">0</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// meta is located on every task inside &quot;onFinished&quot;</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">onFinished</span><span style="color:#999999;">(</span><span style="color:#B07D48;">files</span><span style="color:#999999;">) {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">files</span><span style="color:#999999;">[</span><span style="color:#2F798A;">0</span><span style="color:#999999;">].</span><span style="color:#B07D48;">meta</span><span style="color:#999999;">.</span><span style="color:#B07D48;">done</span><span style="color:#999999;"> </span><span style="color:#AB5959;">===</span><span style="color:#999999;"> </span><span style="color:#1E754F;">true</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">files</span><span style="color:#999999;">[</span><span style="color:#2F798A;">0</span><span style="color:#999999;">].</span><span style="color:#B07D48;">tasks</span><span style="color:#999999;">[</span><span style="color:#2F798A;">0</span><span style="color:#999999;">].</span><span style="color:#B07D48;">meta</span><span style="color:#999999;">.</span><span style="color:#B07D48;">custom</span><span style="color:#999999;"> </span><span style="color:#AB5959;">===</span><span style="color:#999999;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">some-custom-handler</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#999999;">  }</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Vitest can send several tasks at the same time if several tests are completed in a short period of time.</p></div><div class="danger custom-block"><p class="custom-block-title">BEWARE</p><p>Vitest uses different methods to communicate with the Node.js process.</p><ul><li>If Vitest runs tests inside worker threads, it will send data via <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessagePort" target="_blank" rel="noreferrer">message port</a></li><li>If Vitest uses child process, the data will be send as a serialized Buffer via <a href="https://nodejs.org/api/process.html#processsendmessage-sendhandle-options-callback" target="_blank" rel="noreferrer"><code>process.send</code></a> API</li><li>If Vitest run tests in the browser, the data will be stringified using <a href="https://www.npmjs.com/package/flatted" target="_blank" rel="noreferrer">flatted</a> package</li></ul><p>The general rule of thumb is that you can send almost anything, except for functions, Promises, regexp (<code>v8.stringify</code> cannot serialize it, but you can send a string version and parse it in the Node.js process yourself), and other non-serializable data, but you can have cyclic references inside.</p><p>Also, make sure you serialize <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#error_types" target="_blank" rel="noreferrer">Error properties</a> before you set them.</p></div><p>You can also get this information from Vitest state when tests finished running:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">vitest</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#4D9375;">await</span><span style="color:#CB7676;"> </span><span style="color:#80A665;">createVitest</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">test</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#4D9375;">await</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vitest</span><span style="color:#666666;">.</span><span style="color:#80A665;">start</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#BD976A;">vitest</span><span style="color:#666666;">.</span><span style="color:#BD976A;">state</span><span style="color:#666666;">.</span><span style="color:#80A665;">getFiles</span><span style="color:#666666;">()[</span><span style="color:#4C9A91;">0</span><span style="color:#666666;">].</span><span style="color:#BD976A;">meta</span><span style="color:#666666;">.</span><span style="color:#BD976A;">done</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span></span>
<span class="line"><span style="color:#BD976A;">vitest</span><span style="color:#666666;">.</span><span style="color:#BD976A;">state</span><span style="color:#666666;">.</span><span style="color:#80A665;">getFiles</span><span style="color:#666666;">()[</span><span style="color:#4C9A91;">0</span><span style="color:#666666;">].</span><span style="color:#BD976A;">tasks</span><span style="color:#666666;">[</span><span style="color:#4C9A91;">0</span><span style="color:#666666;">].</span><span style="color:#BD976A;">meta</span><span style="color:#666666;">.</span><span style="color:#BD976A;">custom</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">some-custom-handler</span><span style="color:#C98A7D99;">&#39;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">vitest</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">await</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">createVitest</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">test</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#1E754F;">await</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vitest</span><span style="color:#999999;">.</span><span style="color:#59873A;">start</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#B07D48;">vitest</span><span style="color:#999999;">.</span><span style="color:#B07D48;">state</span><span style="color:#999999;">.</span><span style="color:#59873A;">getFiles</span><span style="color:#999999;">()[</span><span style="color:#2F798A;">0</span><span style="color:#999999;">].</span><span style="color:#B07D48;">meta</span><span style="color:#999999;">.</span><span style="color:#B07D48;">done</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span></span>
<span class="line"><span style="color:#B07D48;">vitest</span><span style="color:#999999;">.</span><span style="color:#B07D48;">state</span><span style="color:#999999;">.</span><span style="color:#59873A;">getFiles</span><span style="color:#999999;">()[</span><span style="color:#2F798A;">0</span><span style="color:#999999;">].</span><span style="color:#B07D48;">tasks</span><span style="color:#999999;">[</span><span style="color:#2F798A;">0</span><span style="color:#999999;">].</span><span style="color:#B07D48;">meta</span><span style="color:#999999;">.</span><span style="color:#B07D48;">custom</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">some-custom-handler</span><span style="color:#B5695999;">&#39;</span></span></code></pre></div><p>It&#39;s also possible to extend type definitions when using TypeScript:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">declare</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">module</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">interface</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">TaskMeta</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">done</span><span style="color:#CB7676;">?</span><span style="color:#666666;">: </span><span style="color:#5DA994;">boolean</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">custom</span><span style="color:#CB7676;">?</span><span style="color:#666666;">: </span><span style="color:#5DA994;">string</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">module</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">TaskMeta</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">done</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">boolean</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">custom</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div>`,14),e=[p];function t(c,r,y,i,d,A){return a(),n("div",null,e)}const u=s(o,[["render",t]]);export{B as __pageData,u as default};
