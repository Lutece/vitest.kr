import{_ as s,j as n,k as a,V as o}from"./chunks/framework.cf42e605.js";const m=JSON.parse('{"title":"Test Environment","description":"","frontmatter":{},"headers":[],"relativePath":"guide/environment.md","filePath":"guide/environment.md","lastUpdated":1675852235000}'),l={name:"guide/environment.md"},p=o(`<h1 id="test-environment" tabindex="-1">Test Environment <a class="header-anchor" href="#test-environment" aria-label="Permalink to &quot;Test Environment&quot;">​</a></h1><p>Vitest provides <a href="/config/#environment"><code>environment</code></a> option to run code inside a specific environment. You can modify how environment behaves with <a href="/config/#environmentoptions"><code>environmentOptions</code></a> option.</p><p>By default, you can use these environments:</p><ul><li><code>node</code> is default environment</li><li><code>jsdom</code> emulates browser environment by providing Browser API, uses <a href="https://github.com/jsdom/jsdom" target="_blank" rel="noreferrer"><code>jsdom</code></a> package</li><li><code>happy-dom</code> emulates browser environment by providing Browser API, and considered to be faster than jsdom, but lacks some API, uses <a href="https://github.com/capricorn86/happy-dom" target="_blank" rel="noreferrer"><code>happy-dom</code></a> package</li><li><code>edge-runtime</code> emulates Vercel&#39;s <a href="https://edge-runtime.vercel.app/" target="_blank" rel="noreferrer">edge-runtime</a>, uses <a href="https://www.npmjs.com/package/@edge-runtime/vm" target="_blank" rel="noreferrer"><code>@edge-runtime/vm</code></a> package</li></ul><h2 id="environments-for-specific-files" tabindex="-1">Environments for specific files <a class="header-anchor" href="#environments-for-specific-files" aria-label="Permalink to &quot;Environments for specific files&quot;">​</a></h2><p>When setting <code>environment</code> option in your config, it will apply to all the test files in your project. To have more fine-grained control, you can use control comments to specify environment for specific files. Control comments are comments that start with <code>@vitest-environment</code> and are followed by the environment name:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// @vitest-environment jsdom</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">test</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">test</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#CB7676;">typeof</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">window</span><span style="color:#666666;">).</span><span style="color:#BD976A;">not</span><span style="color:#666666;">.</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">undefined</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// @vitest-environment jsdom</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">test</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">test</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">window</span><span style="color:#999999;">).</span><span style="color:#B07D48;">not</span><span style="color:#999999;">.</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">undefined</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>Or you can also set <a href="https://vitest.dev/config/#environmentmatchglobs" target="_blank" rel="noreferrer"><code>environmentMatchGlobs</code></a> option specifying the environment based on the glob patterns.</p><h2 id="custom-environment" tabindex="-1">Custom Environment <a class="header-anchor" href="#custom-environment" aria-label="Permalink to &quot;Custom Environment&quot;">​</a></h2><p>Starting from 0.23.0, you can create your own package to extend Vitest environment. To do so, create package with the name <code>vitest-environment-\${name}</code>. That package should export an object with the shape of <code>Environment</code>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">type</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">Environment</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">Environment</span><span style="color:#666666;">&gt;{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">name</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">custom</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#80A665;">setup</span><span style="color:#666666;">() {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#758575DD;">// custom setup</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#4D9375;">return</span><span style="color:#666666;"> {</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#80A665;">teardown</span><span style="color:#666666;">() {</span></span>
<span class="line"><span style="color:#666666;">        </span><span style="color:#758575DD;">// called after all tests with this env have been run</span></span>
<span class="line"><span style="color:#666666;">      }</span></span>
<span class="line"><span style="color:#666666;">    }</span></span>
<span class="line"><span style="color:#666666;">  }</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">type</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Environment</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">Environment</span><span style="color:#999999;">&gt;{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">name</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">custom</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">setup</span><span style="color:#999999;">() {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// custom setup</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#1E754F;">return</span><span style="color:#999999;"> {</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#59873A;">teardown</span><span style="color:#999999;">() {</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#A0ADA0;">// called after all tests with this env have been run</span></span>
<span class="line"><span style="color:#999999;">      }</span></span>
<span class="line"><span style="color:#999999;">    }</span></span>
<span class="line"><span style="color:#999999;">  }</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>You also have access to default Vitest environments through <code>vitest/environments</code> entry:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">builtinEnvironments</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">populateGlobal</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest/environments</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#BD976A;">builtinEnvironments</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// { jsdom, happy-dom, node, edge-runtime }</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">builtinEnvironments</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">populateGlobal</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest/environments</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">builtinEnvironments</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// { jsdom, happy-dom, node, edge-runtime }</span></span></code></pre></div><p>Vitest also provides <code>populateGlobal</code> utility function, which can be used to move properties from object into the global namespace:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">interface</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">PopulateOptions</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// should non-class functions be bind to the global namespace</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">bindFunctions</span><span style="color:#CB7676;">?</span><span style="color:#666666;">: </span><span style="color:#5DA994;">boolean</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">interface</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">PopulateResult</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// a list of all keys that were copied, even if value doesn&#39;t exist on original object</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">keys</span><span style="color:#666666;">: </span><span style="color:#5DA994;">Set</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">string</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// a map of original object that might have been overridden with keys</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// you can return these values inside \`teardown\` function</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">originals</span><span style="color:#666666;">: </span><span style="color:#5DA994;">Map</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">string</span><span style="color:#666666;"> | </span><span style="color:#5DA994;">symbol</span><span style="color:#666666;">, </span><span style="color:#5DA994;">any</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">populateGlobal</span><span style="color:#666666;">(</span><span style="color:#BD976A;">global</span><span style="color:#666666;">: </span><span style="color:#5DA994;">any</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">original</span><span style="color:#666666;">: </span><span style="color:#5DA994;">any</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">options</span><span style="color:#666666;">: </span><span style="color:#5DA994;">PopulateOptions</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">PopulateResult</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">PopulateOptions</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// should non-class functions be bind to the global namespace</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">bindFunctions</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">boolean</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">PopulateResult</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// a list of all keys that were copied, even if value doesn&#39;t exist on original object</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">keys</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Set</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">string</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// a map of original object that might have been overridden with keys</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// you can return these values inside \`teardown\` function</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">originals</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Map</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">string</span><span style="color:#999999;"> | </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;">, </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">populateGlobal</span><span style="color:#999999;">(</span><span style="color:#B07D48;">global</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">original</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">options</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">PopulateOptions</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">PopulateResult</span></span></code></pre></div>`,15),e=[p];function t(c,r,y,i,d,D){return n(),a("div",null,e)}const u=s(l,[["render",t]]);export{m as __pageData,u as default};
