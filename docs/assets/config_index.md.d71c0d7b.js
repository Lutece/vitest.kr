import{_ as l}from"./chunks/NonProjectOption.a40e03a3.js";import{_ as t,j as p,k as r,C as s,p as e,L as n,V as a}from"./chunks/framework.8939a477.js";const zs=JSON.parse('{"title":"Configuring Vitest","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"config/index.md","filePath":"config/index.md","lastUpdated":1690470465000}'),c={name:"config/index.md"},i=a(`<h1 id="configuring-vitest" tabindex="-1">Configuring Vitest <a class="header-anchor" href="#configuring-vitest" aria-label="Permalink to &quot;Configuring Vitest&quot;">​</a></h1><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p><code>vitest</code> will read your root <code>vite.config.ts</code> when it is present to match with the plugins and setup as your Vite app. If you want to have a different configuration for testing or your main app doesn&#39;t rely on Vite specifically, you could either:</p><ul><li>Create <code>vitest.config.ts</code>, which will have the higher priority and will override the configuration from <code>vite.config.ts</code></li><li>Pass <code>--config</code> option to CLI, e.g. <code>vitest --config ./path/to/vitest.config.ts</code></li><li>Use <code>p<wbr>rocess.env.VITEST</code> or <code>mode</code> property on <code>defineConfig</code> (will be set to <code>test</code>/<code>benchmark</code> if not overridden) to conditionally apply different configuration in <code>vite.config.ts</code></li></ul><p>To configure <code>vitest</code> itself, add <code>test</code> property in your Vite config. You&#39;ll also need to add a reference to Vitest types using a <a href="https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html#-reference-types-" target="_blank" rel="noreferrer">triple slash command</a> at the top of your config file, if you are importing <code>defineConfig</code> from <code>vite</code> itself.</p><p>using <code>defineConfig</code> from <code>vite</code> you should follow this:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">/// </span><span style="color:#666666;">&lt;</span><span style="color:#4D9375;">reference</span><span style="color:#758575DD;"> </span><span style="color:#BD976A;">types</span><span style="color:#666666;">=</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#758575DD;"> </span><span style="color:#666666;">/&gt;</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">defineConfig</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vite</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">defineConfig</span><span style="color:#666666;">({</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">test</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#758575DD;">// ...</span></span>
<span class="line"><span style="color:#666666;">  },</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">/// </span><span style="color:#999999;">&lt;</span><span style="color:#1E754F;">reference</span><span style="color:#A0ADA0;"> </span><span style="color:#B07D48;">types</span><span style="color:#999999;">=</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&quot;</span><span style="color:#A0ADA0;"> </span><span style="color:#999999;">/&gt;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineConfig</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vite</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#59873A;">defineConfig</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">test</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>using <code>defineConfig</code> from <code>vitest/config</code> you should follow this:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">defineConfig</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest/config</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">defineConfig</span><span style="color:#666666;">({</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">test</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#758575DD;">// ...</span></span>
<span class="line"><span style="color:#666666;">  },</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineConfig</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest/config</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#59873A;">defineConfig</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">test</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>You can retrieve Vitest&#39;s default options to expand them if needed:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">configDefaults</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">defineConfig</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest/config</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">defineConfig</span><span style="color:#666666;">({</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">test</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">exclude</span><span style="color:#666666;">: [...</span><span style="color:#BD976A;">configDefaults</span><span style="color:#666666;">.</span><span style="color:#BD976A;">exclude</span><span style="color:#666666;">, </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">packages/template/*</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#666666;">  },</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">configDefaults</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineConfig</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest/config</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#59873A;">defineConfig</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">test</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">exclude</span><span style="color:#999999;">: [...</span><span style="color:#B07D48;">configDefaults</span><span style="color:#999999;">.</span><span style="color:#B07D48;">exclude</span><span style="color:#999999;">, </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">packages/template/*</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>When using a separate <code>vitest.config.js</code>, you can also extend Vite&#39;s options from another config file if needed:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">defineConfig</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">mergeConfig</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest/config</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">viteConfig</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./vite.config</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">mergeConfig</span><span style="color:#666666;">(</span><span style="color:#BD976A;">viteConfig</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">defineConfig</span><span style="color:#666666;">({</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">test</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">exclude</span><span style="color:#666666;">: [</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">packages/template/*</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#666666;">  },</span></span>
<span class="line"><span style="color:#666666;">}))</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineConfig</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">mergeConfig</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest/config</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">viteConfig</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./vite.config</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#59873A;">mergeConfig</span><span style="color:#999999;">(</span><span style="color:#B07D48;">viteConfig</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#59873A;">defineConfig</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">test</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">exclude</span><span style="color:#999999;">: [</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">packages/template/*</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">}))</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>mergeConfig</code> helper is availabe in Vitest since v0.30.0. You can import it from <code>vite</code> directly, if you use lower version.</p></div><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In addition to the following options, you can also use any configuration option from <a href="https://vitejs.dev/config/" target="_blank" rel="noreferrer">Vite</a>. For example, <code>define</code> to define global variables, or <code>resolve.alias</code> to define aliases.</p></div>`,16),d={class:"tip custom-block"},y=s("p",{class:"custom-block-title"},"TIP",-1),u=s("a",{href:"/vitest.kr/guide/workspace.html"},"workspace",-1),h=a('<h3 id="include" tabindex="-1">include <a class="header-anchor" href="#include" aria-label="Permalink to &quot;include&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[&#39;**/*.{test,spec}.?(c|m)[jt]s?(x)&#39;]</code></li></ul><p>Files to include in the test run, using glob pattern.</p><h3 id="exclude" tabindex="-1">exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;exclude&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[&#39;**/node_modules/**&#39;, &#39;**/dist/**&#39;, &#39;**/cypress/**&#39;, &#39;**/.{idea,git,cache,output,temp}/**&#39;, &#39;**/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tsup,build}.config.*&#39;]</code></li></ul><p>Files to exclude from the test run, using glob pattern.</p><h3 id="includesource" tabindex="-1">includeSource <a class="header-anchor" href="#includesource" aria-label="Permalink to &quot;includeSource&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[]</code></li></ul><p>Include globs for in-source test files.</p><p>When defined, Vitest will run all matched files with <code>i<wbr>mport.meta.vitest</code> inside.</p><h3 id="deps" tabindex="-1">deps <a class="header-anchor" href="#deps" aria-label="Permalink to &quot;deps&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>{ external?, inline?, ... }</code></li></ul><p>Handling for dependencies resolution.</p><h4 id="deps-experimentaloptimizer" tabindex="-1">deps.experimentalOptimizer <a class="header-anchor" href="#deps-experimentaloptimizer" aria-label="Permalink to &quot;deps.experimentalOptimizer&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>{ ssr?, web? }</code></li><li><strong>Version:</strong> Since Vitest 0.29.0</li><li><strong>See also:</strong> <a href="https://vitejs.dev/config/dep-optimization-options.html" target="_blank" rel="noreferrer">Dep Optimization Options</a></li></ul><p>Enable dependency optimization. If you have a lot of tests, this might improve their performance.</p><p>When Vitest encounters the external library listed in <code>include</code>, it will be bundled into a single file using esbuild and imported as a whole module. This is good for several reasons:</p><ul><li>Importing packages with a lot of imports is expensive. By bundling them into one file we can save a lot of time</li><li>Importing UI libraries is expensive because they are not meant to run inside Node.js</li><li>Your <code>alias</code> configuration is now respected inside bundled packages</li><li>Code in your tests is running closer to how it&#39;s running in the browser</li></ul><p>Be aware that only packages in <code>deps.experimentalOptimizer?.[mode].include</code> option are bundled (some plugins populate this automatically, like Svelte). You can read more about available options in <a href="https://vitejs.dev/config/dep-optimization-options.html" target="_blank" rel="noreferrer">Vite</a> docs. By default, Vitest uses <code>experimentalOptimizer.web</code> for <code>jsdom</code> and <code>happy-dom</code> environments, and <code>experimentalOptimizer.ssr</code> for <code>node</code> and <code>edge</code> environments, but it is configurable by <a href="#transformmode"><code>transformMode</code></a>.</p><p>This options also inherits your <code>optimizeDeps</code> configuration (for web Vitest will extend <code>optimizeDeps</code>, for ssr - <code>ssr.optimizeDeps</code>). If you redefine <code>include</code>/<code>exclude</code> option in <code>deps.experimentalOptimizer</code> it will extend your <code>optimizeDeps</code> when running tests. Vitest automatically removes the same options from <code>include</code>, if they are listed in <code>exclude</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You will not be able to edit your <code>node_modules</code> code for debugging, since the code is actually located in your <code>cacheDir</code> or <code>test.cache.dir</code> directory. If you want to debug with <code>console.log</code> statements, edit it directly or force rebundling with <code>deps.experimentalOptimizer?.[mode].force</code> option.</p></div><h4 id="deps-external" tabindex="-1">deps.external <a class="header-anchor" href="#deps-external" aria-label="Permalink to &quot;deps.external&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>(string | RegExp)[]</code></li><li><strong>Default:</strong> <code>[&#39;**/node_modules/**&#39;]</code></li></ul><p>Externalize means that Vite will bypass the package to native Node. Externalized dependencies will not be applied Vite&#39;s transformers and resolvers, so they do not support HMR on reload. Typically, packages under <code>node_modules</code> are externalized.</p><h4 id="deps-inline" tabindex="-1">deps.inline <a class="header-anchor" href="#deps-inline" aria-label="Permalink to &quot;deps.inline&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>(string | RegExp)[] | true</code></li><li><strong>Default:</strong> <code>[]</code></li></ul><p>Vite will process inlined modules. This could be helpful to handle packages that ship <code>.js</code> in ESM format (that Node can&#39;t handle).</p><p>If <code>true</code>, every dependency will be inlined. All dependencies, specified in <a href="https://vitejs.dev/guide/ssr.html#ssr-externals" target="_blank" rel="noreferrer"><code>ssr.noExternal</code></a> will be inlined by default.</p><h4 id="deps-fallbackcjs" tabindex="-1">deps.fallbackCJS <a class="header-anchor" href="#deps-fallbackcjs" aria-label="Permalink to &quot;deps.fallbackCJS&quot;">​</a></h4><ul><li><strong>Type</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>When a dependency is a valid ESM package, try to guess the cjs version based on the path. This might be helpful, if a dependency has the wrong ESM file.</p><p>This might potentially cause some misalignment if a package has different logic in ESM and CJS mode.</p>',32),g={id:"deps-registernodeloader",tabindex:"-1"},f=s("a",{class:"header-anchor",href:"#deps-registernodeloader","aria-label":'Permalink to "deps.registerNodeLoader<NonProjectOption />"'},"​",-1),m=a(`<ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>Use <a href="https://nodejs.org/api/esm.html#loaders" target="_blank" rel="noreferrer">experimental Node loader</a> to resolve imports inside externalized files, using Vite resolve algorithm.</p><p>If disabled, your <code>alias</code> and <code>&lt;plugin&gt;.resolveId</code> won&#39;t affect imports inside externalized packages (by default, <code>node_modules</code>).</p><h4 id="deps-interopdefault" tabindex="-1">deps.interopDefault <a class="header-anchor" href="#deps-interopdefault" aria-label="Permalink to &quot;deps.interopDefault&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li></ul><p>Interpret CJS module&#39;s default as named exports. Some dependencies only bundle CJS modules and don&#39;t use named exports that Node.js can statically analyze when a package is imported using <code>import</code> syntax instead of <code>require</code>. When importing such dependencies in Node environment using named exports, you will see this error:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#dbd7caee;">import { read } from &#39;fs-jetpack&#39;;</span></span>
<span class="line"><span style="color:#dbd7caee;">         ^^^^</span></span>
<span class="line"><span style="color:#dbd7caee;">SyntaxError: Named export &#39;read&#39; not found. The requested module &#39;fs-jetpack&#39; is a CommonJS module, which may not support all module.exports as named exports.</span></span>
<span class="line"><span style="color:#dbd7caee;">CommonJS modules can always be imported via the default export.</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#393a34;">import { read } from &#39;fs-jetpack&#39;;</span></span>
<span class="line"><span style="color:#393a34;">         ^^^^</span></span>
<span class="line"><span style="color:#393a34;">SyntaxError: Named export &#39;read&#39; not found. The requested module &#39;fs-jetpack&#39; is a CommonJS module, which may not support all module.exports as named exports.</span></span>
<span class="line"><span style="color:#393a34;">CommonJS modules can always be imported via the default export.</span></span></code></pre></div><p>Vitest doesn&#39;t do static analysis, and cannot fail before your running code, so you will most likely see this error when running tests, if this feature is disabled:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#dbd7caee;">TypeError: createAsyncThunk is not a function</span></span>
<span class="line"><span style="color:#dbd7caee;">TypeError: default is not a function</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#393a34;">TypeError: createAsyncThunk is not a function</span></span>
<span class="line"><span style="color:#393a34;">TypeError: default is not a function</span></span></code></pre></div><p>By default, Vitest assumes you are using a bundler to bypass this and will not fail, but you can disable this behaviour manually, if you code is not processed.</p><h4 id="deps-moduledirectories" tabindex="-1">deps.moduleDirectories <a class="header-anchor" href="#deps-moduledirectories" aria-label="Permalink to &quot;deps.moduleDirectories&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default</strong>: <code>[&#39;node_modules&#39;]</code></li></ul><p>A list of directories that should be treated as module directories. This config option affects the behavior of <a href="/vitest.kr/api/vi.html#vi-mock"><code>vi.mock</code></a>: when no factory is provided and the path of what you are mocking matches one of the <code>moduleDirectories</code> values, Vitest will try to resolve the mock by looking for a <code>__mocks__</code> folder in the <a href="/vitest.kr/config/#root">root</a> of the project.</p><p>This option will also affect if a file should be treated as a module when externalizing dependencies. By default, Vitest imports external modules with native Node.js bypassing Vite transformation step.</p><p>Setting this option will <em>override</em> the default, if you wish to still search <code>node_modules</code> for packages include it along with any other options:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">defineConfig</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest/config</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">defineConfig</span><span style="color:#666666;">({</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">test</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">deps</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#B8A965;">moduleDirectories</span><span style="color:#666666;">: [</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">node_modules</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">, </span><span style="color:#BD976A;">path</span><span style="color:#666666;">.</span><span style="color:#80A665;">resolve</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">../../packages</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)],</span></span>
<span class="line"><span style="color:#666666;">    }</span></span>
<span class="line"><span style="color:#666666;">  },</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineConfig</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest/config</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#59873A;">defineConfig</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">test</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">deps</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#998418;">moduleDirectories</span><span style="color:#999999;">: [</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">node_modules</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">, </span><span style="color:#B07D48;">path</span><span style="color:#999999;">.</span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">../../packages</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)],</span></span>
<span class="line"><span style="color:#999999;">    }</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><h3 id="runner" tabindex="-1">runner <a class="header-anchor" href="#runner" aria-label="Permalink to &quot;runner&quot;">​</a></h3><ul><li><strong>Type</strong>: <code>VitestRunnerConstructor</code></li><li><strong>Default</strong>: <code>node</code>, when running tests, or <code>benchmark</code>, when running benchmarks</li></ul><p>Path to a custom test runner. This is an advanced feature and should be used with custom library runners. You can read more about it in <a href="/vitest.kr/advanced/runner.html">the documentation</a>.</p><h3 id="benchmark" tabindex="-1">benchmark <a class="header-anchor" href="#benchmark" aria-label="Permalink to &quot;benchmark&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>{ include?, exclude?, ... }</code></li></ul><p>Options used when running <code>vitest bench</code>.</p><h4 id="benchmark-include" tabindex="-1">benchmark.include <a class="header-anchor" href="#benchmark-include" aria-label="Permalink to &quot;benchmark.include&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[&#39;**/*.{bench,benchmark}.?(c|m)[jt]s?(x)&#39;]</code></li></ul><p>Include globs for benchmark test files</p><h4 id="benchmark-exclude" tabindex="-1">benchmark.exclude <a class="header-anchor" href="#benchmark-exclude" aria-label="Permalink to &quot;benchmark.exclude&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[&#39;node_modules&#39;, &#39;dist&#39;, &#39;.idea&#39;, &#39;.git&#39;, &#39;.cache&#39;]</code></li></ul><p>Exclude globs for benchmark test files</p><h4 id="benchmark-includesource" tabindex="-1">benchmark.includeSource <a class="header-anchor" href="#benchmark-includesource" aria-label="Permalink to &quot;benchmark.includeSource&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[]</code></li></ul><p>Include globs for in-source benchmark test files. This option is similar to <a href="#includesource"><code>includeSource</code></a>.</p><p>When defined, Vitest will run all matched files with <code>i<wbr>mport.meta.vitest</code> inside.</p><h4 id="benchmark-reporters" tabindex="-1">benchmark.reporters <a class="header-anchor" href="#benchmark-reporters" aria-label="Permalink to &quot;benchmark.reporters&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>Arrayable&lt;BenchmarkBuiltinReporters | Reporter&gt;</code></li><li><strong>Default:</strong> <code>&#39;default&#39;</code></li></ul><p>Custom reporter for output. Can contain one or more built-in report names, reporter instances, and/or paths to custom reporters.</p><h4 id="benchmark-outputfile" tabindex="-1">benchmark.outputFile <a class="header-anchor" href="#benchmark-outputfile" aria-label="Permalink to &quot;benchmark.outputFile&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string | Record&lt;string, string&gt;</code></li></ul><p>Write benchmark results to a file when the <code>--reporter=json</code> option is also specified. By providing an object instead of a string you can define individual outputs when using multiple reporters.</p><p>To provide object via CLI command, use the following syntax: <code>--outputFile.json=./path --outputFile.junit=./other-path</code>.</p><h3 id="alias" tabindex="-1">alias <a class="header-anchor" href="#alias" aria-label="Permalink to &quot;alias&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>Record&lt;string, string&gt; | Array&lt;{ find: string | RegExp, replacement: string, customResolver?: ResolverFunction | ResolverObject }&gt;</code></li></ul><p>Define custom aliases when running inside tests. They will be merged with aliases from <code>resolve.alias</code>.</p><h3 id="globals" tabindex="-1">globals <a class="header-anchor" href="#globals" aria-label="Permalink to &quot;globals&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>CLI:</strong> <code>--globals</code>, <code>--globals=false</code></li></ul><p>By default, <code>vitest</code> does not provide global APIs for explicitness. If you prefer to use the APIs globally like Jest, you can pass the <code>--globals</code> option to CLI or add <code>globals: true</code> in the config.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// vite.config.ts</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">defineConfig</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest/config</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">defineConfig</span><span style="color:#666666;">({</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">test</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">globals</span><span style="color:#666666;">: </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">  },</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// vite.config.ts</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineConfig</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest/config</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#59873A;">defineConfig</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">test</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">globals</span><span style="color:#999999;">: </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>To get TypeScript working with the global APIs, add <code>vitest/globals</code> to the <code>types</code> field in your <code>tsconfig.json</code></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// tsconfig.json</span></span>
<span class="line"><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">compilerOptions</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">types</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">vitest/globals</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">]</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// tsconfig.json</span></span>
<span class="line"><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">compilerOptions</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">types</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">vitest/globals</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>If you are already using <a href="https://github.com/antfu/unplugin-auto-import" target="_blank" rel="noreferrer"><code>unplugin-auto-import</code></a> in your project, you can also use it directly for auto importing those APIs.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// vite.config.ts</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">defineConfig</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest/config</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">AutoImport</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">unplugin-auto-import/vite</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">defineConfig</span><span style="color:#666666;">({</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">plugins</span><span style="color:#666666;">: [</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#80A665;">AutoImport</span><span style="color:#666666;">({</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#B8A965;">imports</span><span style="color:#666666;">: [</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#B8A965;">dts</span><span style="color:#666666;">: </span><span style="color:#4D9375;">true</span><span style="color:#666666;">, </span><span style="color:#758575DD;">// generate TypeScript declaration</span></span>
<span class="line"><span style="color:#666666;">    }),</span></span>
<span class="line"><span style="color:#666666;">  ],</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// vite.config.ts</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineConfig</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest/config</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">AutoImport</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">unplugin-auto-import/vite</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#59873A;">defineConfig</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">plugins</span><span style="color:#999999;">: [</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#59873A;">AutoImport</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#998418;">imports</span><span style="color:#999999;">: [</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#998418;">dts</span><span style="color:#999999;">: </span><span style="color:#1E754F;">true</span><span style="color:#999999;">, </span><span style="color:#A0ADA0;">// generate TypeScript declaration</span></span>
<span class="line"><span style="color:#999999;">    }),</span></span>
<span class="line"><span style="color:#999999;">  ],</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><h3 id="environment" tabindex="-1">environment <a class="header-anchor" href="#environment" aria-label="Permalink to &quot;environment&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>&#39;node&#39; | &#39;jsdom&#39; | &#39;happy-dom&#39; | &#39;edge-runtime&#39; | string</code></li><li><strong>Default:</strong> <code>&#39;node&#39;</code></li><li><strong>CLI:</strong> <code>--environment=&lt;env&gt;</code></li></ul><p>The environment that will be used for testing. The default environment in Vitest is a Node.js environment. If you are building a web application, you can use browser-like environment through either <a href="https://github.com/jsdom/jsdom" target="_blank" rel="noreferrer"><code>jsdom</code></a> or <a href="https://github.com/capricorn86/happy-dom" target="_blank" rel="noreferrer"><code>happy-dom</code></a> instead. If you are building edge functions, you can use <a href="https://edge-runtime.vercel.app/packages/vm" target="_blank" rel="noreferrer"><code>edge-runtime</code></a> environment</p><p>By adding a <code>@vitest-environment</code> docblock or comment at the top of the file, you can specify another environment to be used for all tests in that file:</p><p>Docblock style:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;"> * @vitest-environment jsdom</span></span>
<span class="line"><span style="color:#758575DD;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">use jsdom in this test file</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">element</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">document</span><span style="color:#666666;">.</span><span style="color:#80A665;">createElement</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">div</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">element</span><span style="color:#666666;">).</span><span style="color:#BD976A;">not</span><span style="color:#666666;">.</span><span style="color:#80A665;">toBeNull</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;"> * @vitest-environment jsdom</span></span>
<span class="line"><span style="color:#A0ADA0;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">use jsdom in this test file</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">element</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">document</span><span style="color:#999999;">.</span><span style="color:#59873A;">createElement</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">div</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">element</span><span style="color:#999999;">).</span><span style="color:#B07D48;">not</span><span style="color:#999999;">.</span><span style="color:#59873A;">toBeNull</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>Comment style:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// @vitest-environment happy-dom</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">use happy-dom in this test file</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">element</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">document</span><span style="color:#666666;">.</span><span style="color:#80A665;">createElement</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">div</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">element</span><span style="color:#666666;">).</span><span style="color:#BD976A;">not</span><span style="color:#666666;">.</span><span style="color:#80A665;">toBeNull</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// @vitest-environment happy-dom</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">use happy-dom in this test file</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">element</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">document</span><span style="color:#999999;">.</span><span style="color:#59873A;">createElement</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">div</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">element</span><span style="color:#999999;">).</span><span style="color:#B07D48;">not</span><span style="color:#999999;">.</span><span style="color:#59873A;">toBeNull</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>For compatibility with Jest, there is also a <code>@jest-environment</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;"> * @jest-environment jsdom</span></span>
<span class="line"><span style="color:#758575DD;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">use jsdom in this test file</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">element</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">document</span><span style="color:#666666;">.</span><span style="color:#80A665;">createElement</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">div</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">element</span><span style="color:#666666;">).</span><span style="color:#BD976A;">not</span><span style="color:#666666;">.</span><span style="color:#80A665;">toBeNull</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;"> * @jest-environment jsdom</span></span>
<span class="line"><span style="color:#A0ADA0;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">use jsdom in this test file</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">element</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">document</span><span style="color:#999999;">.</span><span style="color:#59873A;">createElement</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">div</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">element</span><span style="color:#999999;">).</span><span style="color:#B07D48;">not</span><span style="color:#999999;">.</span><span style="color:#59873A;">toBeNull</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>If you are running Vitest with <a href="#threads"><code>--threads=false</code></a> flag, your tests will be run in this order: <code>node</code>, <code>jsdom</code>, <code>happy-dom</code>, <code>edge-runtime</code>, <code>custom environments</code>. Meaning, that every test with the same environment is grouped together, but is still running sequentially.</p><p>Starting from 0.23.0, you can also define custom environment. When non-builtin environment is used, Vitest will try to load package <code>vitest-environment-\${name}</code>. That package should export an object with the shape of <code>Environment</code>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">type</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">Environment</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">Environment</span><span style="color:#666666;">&gt;{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">name</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">custom</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#80A665;">setup</span><span style="color:#666666;">() {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#758575DD;">// custom setup</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#4D9375;">return</span><span style="color:#666666;"> {</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#80A665;">teardown</span><span style="color:#666666;">() {</span></span>
<span class="line"><span style="color:#666666;">        </span><span style="color:#758575DD;">// called after all tests with this env have been run</span></span>
<span class="line"><span style="color:#666666;">      }</span></span>
<span class="line"><span style="color:#666666;">    }</span></span>
<span class="line"><span style="color:#666666;">  }</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">type</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Environment</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">Environment</span><span style="color:#999999;">&gt;{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">name</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">custom</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">setup</span><span style="color:#999999;">() {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// custom setup</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#1E754F;">return</span><span style="color:#999999;"> {</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#59873A;">teardown</span><span style="color:#999999;">() {</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#A0ADA0;">// called after all tests with this env have been run</span></span>
<span class="line"><span style="color:#999999;">      }</span></span>
<span class="line"><span style="color:#999999;">    }</span></span>
<span class="line"><span style="color:#999999;">  }</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>Vitest also exposes <code>builtinEnvironments</code> through <code>vitest/environments</code> entry, in case you just want to extend it. You can read more about extending environments in <a href="/vitest.kr/guide/environment.html">our guide</a>.</p><h3 id="environmentoptions" tabindex="-1">environmentOptions <a class="header-anchor" href="#environmentoptions" aria-label="Permalink to &quot;environmentOptions&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>Record&lt;&#39;jsdom&#39; | string, unknown&gt;</code></li><li><strong>Default:</strong> <code>{}</code></li></ul><p>These options are passed down to <code>setup</code> method of current <a href="#environment"><code>environment</code></a>. By default, you can configure only JSDOM options, if you are using it as your test environment.</p><h3 id="environmentmatchglobs" tabindex="-1">environmentMatchGlobs <a class="header-anchor" href="#environmentmatchglobs" aria-label="Permalink to &quot;environmentMatchGlobs&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>[string, EnvironmentName][]</code></li><li><strong>Default:</strong> <code>[]</code></li></ul><p>Automatically assign environment based on globs. The first match will be used.</p><p>For example:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">defineConfig</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest/config</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">defineConfig</span><span style="color:#666666;">({</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">test</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">environmentMatchGlobs</span><span style="color:#666666;">: [</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#758575DD;">// all tests in tests/dom will run in jsdom</span></span>
<span class="line"><span style="color:#666666;">      [</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">tests/dom/**</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">, </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">jsdom</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#758575DD;">// all tests in tests/ with .edge.test.ts will run in edge-runtime</span></span>
<span class="line"><span style="color:#666666;">      [</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">**</span><span style="color:#C99076;">\\/</span><span style="color:#C98A7D;">*.edge.test.ts</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">, </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">edge-runtime</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#758575DD;">// ...</span></span>
<span class="line"><span style="color:#666666;">    ]</span></span>
<span class="line"><span style="color:#666666;">  }</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineConfig</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest/config</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#59873A;">defineConfig</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">test</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">environmentMatchGlobs</span><span style="color:#999999;">: [</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// all tests in tests/dom will run in jsdom</span></span>
<span class="line"><span style="color:#999999;">      [</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">tests/dom/**</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">, </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">jsdom</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// all tests in tests/ with .edge.test.ts will run in edge-runtime</span></span>
<span class="line"><span style="color:#999999;">      [</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">**</span><span style="color:#A65E2B;">\\/</span><span style="color:#B56959;">*.edge.test.ts</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">, </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">edge-runtime</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#999999;">    ]</span></span>
<span class="line"><span style="color:#999999;">  }</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><h3 id="poolmatchglobs" tabindex="-1">poolMatchGlobs <a class="header-anchor" href="#poolmatchglobs" aria-label="Permalink to &quot;poolMatchGlobs&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>[string, &#39;browser&#39; | &#39;threads&#39; | &#39;child_process&#39;][]</code></li><li><strong>Default:</strong> <code>[]</code></li><li><strong>Version:</strong> Since Vitest 0.29.4</li></ul><p>Automatically assign pool in which tests will run based on globs. The first match will be used.</p><p>For example:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">defineConfig</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest/config</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">defineConfig</span><span style="color:#666666;">({</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">test</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">poolMatchGlobs</span><span style="color:#666666;">: [</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#758575DD;">// all tests in &quot;worker-specific&quot; directory will run inside a worker as if you enabled \`--threads\` for them,</span></span>
<span class="line"><span style="color:#666666;">      [</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">**/tests/worker-specific/**</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">, </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">threads</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#758575DD;">// run all tests in &quot;browser&quot; directory in an actual browser</span></span>
<span class="line"><span style="color:#666666;">      [</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">**/tests/browser/**</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">, </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">browser</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#758575DD;">// all other tests will run based on &quot;browser.enabled&quot; and &quot;threads&quot; options, if you didn&#39;t specify other globs</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#758575DD;">// ...</span></span>
<span class="line"><span style="color:#666666;">    ]</span></span>
<span class="line"><span style="color:#666666;">  }</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineConfig</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest/config</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#59873A;">defineConfig</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">test</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">poolMatchGlobs</span><span style="color:#999999;">: [</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// all tests in &quot;worker-specific&quot; directory will run inside a worker as if you enabled \`--threads\` for them,</span></span>
<span class="line"><span style="color:#999999;">      [</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">**/tests/worker-specific/**</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">, </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">threads</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// run all tests in &quot;browser&quot; directory in an actual browser</span></span>
<span class="line"><span style="color:#999999;">      [</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">**/tests/browser/**</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">, </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">browser</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// all other tests will run based on &quot;browser.enabled&quot; and &quot;threads&quot; options, if you didn&#39;t specify other globs</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#999999;">    ]</span></span>
<span class="line"><span style="color:#999999;">  }</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div>`,77),D={id:"update",tabindex:"-1"},A=s("a",{class:"header-anchor",href:"#update","aria-label":'Permalink to "update<NonProjectOption />"'},"​",-1),b=a("<ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>CLI:</strong> <code>-u</code>, <code>--update</code>, <code>--update=false</code></li></ul><p>Update snapshot files. This will update all changed snapshots and delete obsolete ones.</p>",2),v={id:"watch",tabindex:"-1"},C=s("a",{class:"header-anchor",href:"#watch","aria-label":'Permalink to "watch<NonProjectOption />"'},"​",-1),B=a('<ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li><li><strong>CLI:</strong> <code>-w</code>, <code>--watch</code>, <code>--watch=false</code></li></ul><p>Enable watch mode</p><h3 id="root" tabindex="-1">root <a class="header-anchor" href="#root" aria-label="Permalink to &quot;root&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>CLI:</strong> <code>-r &lt;path&gt;</code>, <code>--root=&lt;path&gt;</code></li></ul><p>Project root</p>',5),E={id:"reporters",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#reporters","aria-label":'Permalink to "reporters<NonProjectOption />"'},"​",-1),_=a('<ul><li><strong>Type:</strong> <code>Reporter | Reporter[]</code></li><li><strong>Default:</strong> <code>&#39;default&#39;</code></li><li><strong>CLI:</strong> <code>--reporter=&lt;name&gt;</code>, <code>--reporter=&lt;name1&gt; --reporter=&lt;name2&gt;</code></li></ul><p>Custom reporters for output. Reporters can be <a href="https://github.com/vitest-dev/vitest/blob/main/packages/vitest/src/types/reporter.ts" target="_blank" rel="noreferrer">a Reporter instance</a> or a string to select built in reporters:</p><ul><li><code>&#39;default&#39;</code> - collapse suites when they pass</li><li><code>&#39;basic&#39;</code> - give a reporter like default reporter in ci</li><li><code>&#39;verbose&#39;</code> - keep the full task tree visible</li><li><code>&#39;dot&#39;</code> - show each task as a single dot</li><li><code>&#39;junit&#39;</code> - JUnit XML reporter (you can configure <code>testsuites</code> tag name with <code>VITEST_JUNIT_SUITE_NAME</code> environmental variable)</li><li><code>&#39;json&#39;</code> - give a simple JSON summary</li><li><code>&#39;html&#39;</code> - outputs HTML report based on <a href="/vitest.kr/guide/ui.html"><code>@vitest/ui</code></a></li><li><code>&#39;hanging-process&#39;</code> - displays a list of hanging processes, if Vitest cannot exit process safely. This might be a heavy operation, enable it only if Vitest consistently cannot exit process</li><li>path of a custom reporter (e.g. <code>&#39;./path/to/reporter.ts&#39;</code>, <code>&#39;@scope/reporter&#39;</code>)</li></ul>',3),w={id:"outputfile",tabindex:"-1"},T=s("a",{class:"header-anchor",href:"#outputfile","aria-label":'Permalink to "outputFile<NonProjectOption />"'},"​",-1),x=a('<ul><li><strong>Type:</strong> <code>string | Record&lt;string, string&gt;</code></li><li><strong>CLI:</strong> <code>--outputFile=&lt;path&gt;</code>, <code>--outputFile.json=./path</code></li></ul><p>Write test results to a file when the <code>--reporter=json</code>, <code>--reporter=html</code> or <code>--reporter=junit</code> option is also specified. By providing an object instead of a string you can define individual outputs when using multiple reporters.</p><h3 id="threads" tabindex="-1">threads <a class="header-anchor" href="#threads" aria-label="Permalink to &quot;threads&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li><li><strong>CLI:</strong> <code>--threads</code>, <code>--threads=false</code></li></ul><p>Enable multi-threading using <a href="https://github.com/tinylibs/tinypool" target="_blank" rel="noreferrer">tinypool</a> (a lightweight fork of <a href="https://github.com/piscinajs/piscina" target="_blank" rel="noreferrer">Piscina</a>). Prior to Vitest 0.29.0, Vitest was still running tests inside worker thread, even if this option was disabled. Since 0.29.0, if this option is disabled, Vitest uses <code>child_process</code> to spawn a process to run tests inside, meaning you can use <code>process.chdir</code> and other API that was not available inside workers. If you want to revert to the previous behaviour, use <code>--single-thread</code> option instead.</p><p>Disabling this option also disables module isolation, meaning all tests with the same environment are running inside a single child process.</p><h3 id="singlethread" tabindex="-1">singleThread <a class="header-anchor" href="#singlethread" aria-label="Permalink to &quot;singleThread&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>Version:</strong> Since Vitest 0.29.0</li></ul><p>Run all tests with the same environment inside a single worker thread. This will disable built-in module isolation (your source code or <a href="#deps-inline">inlined</a> code will still be reevaluated for each test), but can improve test performance. Before Vitest 0.29.0 this was equivalent to using <code>--no-threads</code>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Even though this option will force tests to run one after another, this option is different from Jest&#39;s <code>--runInBand</code>. Vitest uses workers not only for running tests in parallel, but also to provide isolation. By disabling this option, your tests will run sequentially, but in the same global context, so you must provide isolation yourself.</p><p>This might cause all sorts of issues, if you are relying on global state (frontend frameworks usually do) or your code relies on environment to be defined separately for each test. But can be a speed boost for your tests (up to 3 times faster), that don&#39;t necessarily rely on global state or can easily bypass that.</p></div>',10),q={id:"maxthreads",tabindex:"-1"},P=s("a",{class:"header-anchor",href:"#maxthreads","aria-label":'Permalink to "maxThreads<NonProjectOption />"'},"​",-1),S=s("ul",null,[s("li",null,[s("strong",null,"Type:"),e(),s("code",null,"number")]),s("li",null,[s("strong",null,"Default:"),e(),s("em",null,"available CPUs")])],-1),I=s("p",null,[e("Maximum number of threads. You can also use "),s("code",null,"VITEST_MAX_THREADS"),e(" environment variable.")],-1),j={id:"minthreads",tabindex:"-1"},V=s("a",{class:"header-anchor",href:"#minthreads","aria-label":'Permalink to "minThreads<NonProjectOption />"'},"​",-1),F=s("ul",null,[s("li",null,[s("strong",null,"Type:"),e(),s("code",null,"number")]),s("li",null,[s("strong",null,"Default:"),e(),s("em",null,"available CPUs")])],-1),N=s("p",null,[e("Minimum number of threads. You can also use "),s("code",null,"VITEST_MIN_THREADS"),e(" environment variable.")],-1),R={id:"useatomics",tabindex:"-1"},O=s("a",{class:"header-anchor",href:"#useatomics","aria-label":'Permalink to "useAtomics<NonProjectOption />"'},"​",-1),L=a('<ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>Version:</strong> Since Vitest 0.28.3</li></ul><p>Use Atomics to synchronize threads.</p><p>This can improve performance in some cases, but might cause segfault in older Node versions.</p><h3 id="testtimeout" tabindex="-1">testTimeout <a class="header-anchor" href="#testtimeout" aria-label="Permalink to &quot;testTimeout&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Default:</strong> <code>5000</code></li><li><strong>CLI:</strong> <code>--test-timeout=5000</code></li></ul><p>Default timeout of a test in milliseconds</p><h3 id="hooktimeout" tabindex="-1">hookTimeout <a class="header-anchor" href="#hooktimeout" aria-label="Permalink to &quot;hookTimeout&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Default:</strong> <code>10000</code></li></ul><p>Default timeout of a hook in milliseconds</p>',9),M={id:"teardowntimeout",tabindex:"-1"},W=s("a",{class:"header-anchor",href:"#teardowntimeout","aria-label":'Permalink to "teardownTimeout<NonProjectOption />"'},"​",-1),U=s("ul",null,[s("li",null,[s("strong",null,"Type:"),e(),s("code",null,"number")]),s("li",null,[s("strong",null,"Default:"),e(),s("code",null,"10000")])],-1),z=s("p",null,"Default timeout to wait for close when Vitest shuts down, in milliseconds",-1),G={id:"silent",tabindex:"-1"},J=s("a",{class:"header-anchor",href:"#silent","aria-label":'Permalink to "silent<NonProjectOption />"'},"​",-1),Y=a(`<ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>CLI:</strong> <code>--silent</code>, <code>--silent=false</code></li></ul><p>Silent console output from tests</p><h3 id="setupfiles" tabindex="-1">setupFiles <a class="header-anchor" href="#setupfiles" aria-label="Permalink to &quot;setupFiles&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>string | string[]</code></li></ul><p>Path to setup files. They will be run before each test file.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Changing setup files will trigger rerun of all tests.</p></div><p>You can use <code>p<wbr>rocess.env.VITEST_POOL_ID</code> (integer-like string) inside to distinguish between threads (will always be <code>&#39;1&#39;</code>, if run with <code>threads: false</code>).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Note, that if you are running <a href="#threads"><code>--threads=false</code></a>, this setup file will be run in the same global scope multiple times. Meaning, that you are accessing the same global object before each test, so make sure you are not doing the same thing more than you need.</p></div><p>For example, you may rely on a global variable:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">config</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">@some-testing-lib</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">if</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#CB7676;">!</span><span style="color:#BD976A;">globalThis</span><span style="color:#666666;">.</span><span style="color:#BD976A;">defined</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">config</span><span style="color:#666666;">.</span><span style="color:#BD976A;">plugins</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#BD976A;">myCoolPlugin</span><span style="color:#666666;">]</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">computeHeavyThing</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">globalThis</span><span style="color:#666666;">.</span><span style="color:#BD976A;">defined</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// hooks are reset before each suite</span></span>
<span class="line"><span style="color:#80A665;">afterEach</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">cleanup</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">globalThis</span><span style="color:#666666;">.</span><span style="color:#BD976A;">resetBeforeEachTest</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">config</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">@some-testing-lib</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#B07D48;">globalThis</span><span style="color:#999999;">.</span><span style="color:#B07D48;">defined</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">config</span><span style="color:#999999;">.</span><span style="color:#B07D48;">plugins</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B07D48;">myCoolPlugin</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">computeHeavyThing</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">globalThis</span><span style="color:#999999;">.</span><span style="color:#B07D48;">defined</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// hooks are reset before each suite</span></span>
<span class="line"><span style="color:#59873A;">afterEach</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">cleanup</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">globalThis</span><span style="color:#999999;">.</span><span style="color:#B07D48;">resetBeforeEachTest</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span></span></code></pre></div><h3 id="globalsetup" tabindex="-1">globalSetup <a class="header-anchor" href="#globalsetup" aria-label="Permalink to &quot;globalSetup&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>string | string[]</code></li></ul><p>Path to global setup files, relative to project root</p><p>A global setup file can either export named functions <code>setup</code> and <code>teardown</code> or a <code>default</code> function that returns a teardown function (<a href="https://github.com/vitest-dev/vitest/blob/main/test/global-setup/vitest.config.ts" target="_blank" rel="noreferrer">example</a>).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Multiple globalSetup files are possible. setup and teardown are executed sequentially with teardown in reverse order.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Beware that the global setup is run in a different global scope, so your tests don&#39;t have access to variables defined here.</p></div>`,16),H={id:"watchexclude",tabindex:"-1"},$=s("a",{class:"header-anchor",href:"#watchexclude","aria-label":'Permalink to "watchExclude<NonProjectOption />"'},"​",-1),X=s("ul",null,[s("li",null,[s("strong",null,"Type:"),e(),s("code",null,"string[]")]),s("li",null,[s("strong",null,"Default:"),e(),s("code",null,"['**/node_modules/**', '**/dist/**']")])],-1),K=s("p",null,"Glob pattern of file paths to be ignored from triggering watch rerun.",-1),Q={id:"forcereruntriggers",tabindex:"-1"},Z=s("a",{class:"header-anchor",href:"#forcereruntriggers","aria-label":'Permalink to "forceRerunTriggers<NonProjectOption />"'},"​",-1),ss=a(`<ul><li><strong>Type</strong>: <code>string[]</code></li><li><strong>Default:</strong> <code>[&#39;**/package.json/**&#39;, &#39;**/vitest.config.*/**&#39;, &#39;**/vite.config.*/**&#39;]</code></li></ul><p>Glob pattern of file paths that will trigger the whole suite rerun. When paired with the <code>--changed</code> argument will run the whole test suite if the trigger is found in the git diff.</p><p>Useful if you are testing calling CLI commands, because Vite cannot construct a module graph:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">execute a script</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">async</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// Vitest cannot rerun this test, if content of \`dist/index.js\` changes</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">await</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">execa</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">node</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">dist/index.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">])</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">execute a script</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">async</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// Vitest cannot rerun this test, if content of \`dist/index.js\` changes</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">await</span><span style="color:#393A34;"> </span><span style="color:#59873A;">execa</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">node</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">dist/index.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">])</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Make sure that your files are not excluded by <code>watchExclude</code>.</p></div><h3 id="isolate" tabindex="-1">isolate <a class="header-anchor" href="#isolate" aria-label="Permalink to &quot;isolate&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li><li><strong>CLI:</strong> <code>--isolate</code>, <code>--isolate=false</code></li></ul><p>Isolate environment for each test file. Does not work if you disable <a href="#threads"><code>--threads</code></a>.</p>`,8),es={id:"coverage",tabindex:"-1"},os=s("a",{class:"header-anchor",href:"#coverage","aria-label":'Permalink to "coverage<NonProjectOption />"'},"​",-1),ns=a(`<p>You can use <a href="https://v8.dev/blog/javascript-code-coverage" target="_blank" rel="noreferrer"><code>v8</code></a>, <a href="https://istanbul.js.org/" target="_blank" rel="noreferrer"><code>istanbul</code></a> or <a href="/vitest.kr/guide/coverage.html#custom-coverage-provider">a custom coverage solution</a> for coverage collection.</p><p>You can provide coverage options to CLI with dot notation:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">npx</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">vitest</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C99076;">--coverage.enabled</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C99076;">--coverage.provider=istanbul</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C99076;">--coverage.all</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">npx</span><span style="color:#393A34;"> </span><span style="color:#B56959;">vitest</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">--coverage.enabled</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">--coverage.provider=istanbul</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">--coverage.all</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you are using coverage options with dot notation, don&#39;t forget to specify <code>--coverage.enabled</code>. Do not provide a single <code>--coverage</code> option in that case.</p></div><h4 id="coverage-provider" tabindex="-1">coverage.provider <a class="header-anchor" href="#coverage-provider" aria-label="Permalink to &quot;coverage.provider&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39; | &#39;custom&#39;</code></li><li><strong>Default:</strong> <code>&#39;v8&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.provider=&lt;provider&gt;</code></li></ul><p>Use <code>provider</code> to select the tool for coverage collection.</p><h4 id="coverage-enabled" tabindex="-1">coverage.enabled <a class="header-anchor" href="#coverage-enabled" aria-label="Permalink to &quot;coverage.enabled&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.enabled</code>, <code>--coverage.enabled=false</code></li></ul><p>Enables coverage collection. Can be overridden using <code>--coverage</code> CLI option.</p><h4 id="coverage-include" tabindex="-1">coverage.include <a class="header-anchor" href="#coverage-include" aria-label="Permalink to &quot;coverage.include&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[&#39;**&#39;]</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.include=&lt;path&gt;</code>, <code>--coverage.include=&lt;path1&gt; --coverage.include=&lt;path2&gt;</code></li></ul><p>List of files included in coverage as glob patterns</p><h4 id="coverage-extension" tabindex="-1">coverage.extension <a class="header-anchor" href="#coverage-extension" aria-label="Permalink to &quot;coverage.extension&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string | string[]</code></li><li><strong>Default:</strong> <code>[&#39;.js&#39;, &#39;.cjs&#39;, &#39;.mjs&#39;, &#39;.ts&#39;, &#39;.mts&#39;, &#39;.cts&#39;, &#39;.tsx&#39;, &#39;.jsx&#39;, &#39;.vue&#39;, &#39;.svelte&#39;]</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.extension=&lt;extension&gt;</code>, <code>--coverage.extension=&lt;extension1&gt; --coverage.extension=&lt;extension2&gt;</code></li></ul><h4 id="coverage-exclude" tabindex="-1">coverage.exclude <a class="header-anchor" href="#coverage-exclude" aria-label="Permalink to &quot;coverage.exclude&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#666666;">[</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">coverage/**</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">dist/**</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">packages/*/test?(s)/**</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">**/*.d.ts</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">cypress/**</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">test?(s)/**</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">test?(-*).?(c|m)[jt]s?(x)</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">**/*{.,-}{test,spec}.?(c|m)[jt]s?(x)</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">**/__tests__/**</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">**/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tsup,build}.config.*</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">**/.{eslint,mocha,prettier}rc.{?(c|m)js,yml}</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">]</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#999999;">[</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">coverage/**</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">dist/**</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">packages/*/test?(s)/**</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">**/*.d.ts</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">cypress/**</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">test?(s)/**</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">test?(-*).?(c|m)[jt]s?(x)</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">**/*{.,-}{test,spec}.?(c|m)[jt]s?(x)</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">**/__tests__/**</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">**/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tsup,build}.config.*</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">**/.{eslint,mocha,prettier}rc.{?(c|m)js,yml}</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">]</span></span></code></pre></div><ul><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.exclude=&lt;path&gt;</code>, <code>--coverage.exclude=&lt;path1&gt; --coverage.exclude=&lt;path2&gt;</code></li></ul><p>List of files excluded from coverage as glob patterns.</p><h4 id="coverage-all" tabindex="-1">coverage.all <a class="header-anchor" href="#coverage-all" aria-label="Permalink to &quot;coverage.all&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.all</code>, <code>--coverage.all=false</code></li></ul><p>Whether to include all files, including the untested ones into report.</p><h4 id="coverage-clean" tabindex="-1">coverage.clean <a class="header-anchor" href="#coverage-clean" aria-label="Permalink to &quot;coverage.clean&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.clean</code>, <code>--coverage.clean=false</code></li></ul><p>Clean coverage results before running tests</p><h4 id="coverage-cleanonrerun" tabindex="-1">coverage.cleanOnRerun <a class="header-anchor" href="#coverage-cleanonrerun" aria-label="Permalink to &quot;coverage.cleanOnRerun&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.cleanOnRerun</code>, <code>--coverage.cleanOnRerun=false</code></li></ul><p>Clean coverage report on watch rerun</p><h4 id="coverage-reportsdirectory" tabindex="-1">coverage.reportsDirectory <a class="header-anchor" href="#coverage-reportsdirectory" aria-label="Permalink to &quot;coverage.reportsDirectory&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>&#39;./coverage&#39;</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.reportsDirectory=&lt;path&gt;</code></li></ul><p>Directory to write coverage report to.</p><h4 id="coverage-reporter" tabindex="-1">coverage.reporter <a class="header-anchor" href="#coverage-reporter" aria-label="Permalink to &quot;coverage.reporter&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string | string[] | [string, {}][]</code></li><li><strong>Default:</strong> <code>[&#39;text&#39;, &#39;html&#39;, &#39;clover&#39;, &#39;json&#39;]</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.reporter=&lt;reporter&gt;</code>, <code>--coverage.reporter=&lt;reporter1&gt; --coverage.reporter=&lt;reporter2&gt;</code></li></ul><p>Coverage reporters to use. See <a href="https://istanbul.js.org/docs/advanced/alternative-reporters/" target="_blank" rel="noreferrer">istanbul documentation</a> for detailed list of all reporters. See <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/276d95e4304b3670eaf6e8e5a7ea9e265a14e338/types/istanbul-reports/index.d.ts" target="_blank" rel="noreferrer"><code>@types/istanbul-reporter</code></a> for details about reporter specific options.</p><p>The reporter has three different types:</p><ul><li>A single reporter: <code>{ reporter: &#39;html&#39; }</code></li><li>Multiple reporters without options: <code>{ reporter: [&#39;html&#39;, &#39;json&#39;] }</code></li><li>A single or multiple reporters with reporter options:<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">reporter</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#666666;">[</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">lcov</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{ </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">projectRoot</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./src</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;"> }],</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#666666;">[</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">json</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{ </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">file</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">coverage.json</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;"> }],</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#666666;">[</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">text</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">]</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">]</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">reporter</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">[</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">lcov</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{ </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">projectRoot</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./src</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;"> }],</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">[</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">json</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{ </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">file</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">coverage.json</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;"> }],</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">[</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">text</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div></li></ul><p>Since Vitest 0.31.0, you can check your coverage report in Vitest UI: check <a href="/vitest.kr/guide/coverage.html#vitest-ui">Vitest UI Coverage</a> for more details.</p><h4 id="coverage-reportonfailure" tabindex="-1">coverage.reportOnFailure <a class="header-anchor" href="#coverage-reportonfailure" aria-label="Permalink to &quot;coverage.reportOnFailure&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code> (since Vitest <code>0.34.0</code>)</li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.reportOnFailure</code>, <code>--coverage.reportOnFailure=false</code></li><li><strong>Version:</strong> Since Vitest 0.31.2</li></ul><p>Generate coverage report even when tests fail.</p><h4 id="coverage-skipfull" tabindex="-1">coverage.skipFull <a class="header-anchor" href="#coverage-skipfull" aria-label="Permalink to &quot;coverage.skipFull&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.skipFull</code>, <code>--coverage.skipFull=false</code></li></ul><p>Do not show files with 100% statement, branch, and function coverage.</p><h4 id="coverage-perfile" tabindex="-1">coverage.perFile <a class="header-anchor" href="#coverage-perfile" aria-label="Permalink to &quot;coverage.perFile&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.perFile</code>, <code>--coverage.perFile=false</code></li></ul><p>Check thresholds per file. See <code>lines</code>, <code>functions</code>, <code>branches</code> and <code>statements</code> for the actual thresholds.</p><h4 id="coverage-thresholdautoupdate" tabindex="-1">coverage.thresholdAutoUpdate <a class="header-anchor" href="#coverage-thresholdautoupdate" aria-label="Permalink to &quot;coverage.thresholdAutoUpdate&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.thresholdAutoUpdate=&lt;boolean&gt;</code></li></ul><p>Update threshold values <code>lines</code>, <code>functions</code>, <code>branches</code> and <code>statements</code> to configuration file when current coverage is above the configured thresholds. This option helps to maintain thresholds when coverage is improved.</p><h4 id="coverage-lines" tabindex="-1">coverage.lines <a class="header-anchor" href="#coverage-lines" aria-label="Permalink to &quot;coverage.lines&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.lines=&lt;number&gt;</code></li></ul><p>Threshold for lines. See <a href="https://github.com/istanbuljs/nyc#coverage-thresholds" target="_blank" rel="noreferrer">istanbul documentation</a> for more information.</p><h4 id="coverage-functions" tabindex="-1">coverage.functions <a class="header-anchor" href="#coverage-functions" aria-label="Permalink to &quot;coverage.functions&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.functions=&lt;number&gt;</code></li></ul><p>Threshold for functions. See <a href="https://github.com/istanbuljs/nyc#coverage-thresholds" target="_blank" rel="noreferrer">istanbul documentation</a> for more information.</p><h4 id="coverage-branches" tabindex="-1">coverage.branches <a class="header-anchor" href="#coverage-branches" aria-label="Permalink to &quot;coverage.branches&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.branches=&lt;number&gt;</code></li></ul><p>Threshold for branches. See <a href="https://github.com/istanbuljs/nyc#coverage-thresholds" target="_blank" rel="noreferrer">istanbul documentation</a> for more information.</p><h4 id="coverage-statements" tabindex="-1">coverage.statements <a class="header-anchor" href="#coverage-statements" aria-label="Permalink to &quot;coverage.statements&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.statements=&lt;number&gt;</code></li></ul><p>Threshold for statements. See <a href="https://github.com/istanbuljs/nyc#coverage-thresholds" target="_blank" rel="noreferrer">istanbul documentation</a> for more information.</p><h4 id="coverage-100" tabindex="-1">coverage.100 <a class="header-anchor" href="#coverage-100" aria-label="Permalink to &quot;coverage.100&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>Available for providers:</strong> <code>&#39;v8&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.100</code>, <code>--coverage.100=false</code></li></ul><p>Shortcut for <code>--check-coverage --lines 100 --functions 100 --branches 100 --statements 100</code>.</p><h4 id="coverage-ignoreclassmethods" tabindex="-1">coverage.ignoreClassMethods <a class="header-anchor" href="#coverage-ignoreclassmethods" aria-label="Permalink to &quot;coverage.ignoreClassMethods&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[]</code></li><li><strong>Available for providers:</strong> <code>&#39;istanbul&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.ignoreClassMethods=&lt;method&gt;</code></li></ul><p>Set to array of class method names to ignore for coverage. See <a href="https://github.com/istanbuljs/nyc#ignoring-methods" target="_blank" rel="noreferrer">istanbul documentation</a> for more information.</p><h4 id="coverage-watermarks" tabindex="-1">coverage.watermarks <a class="header-anchor" href="#coverage-watermarks" aria-label="Permalink to &quot;coverage.watermarks&quot;">​</a></h4><ul><li><strong>Type:</strong></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">statements</span><span style="color:#CB7676;">?:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#BD976A;">number</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">number</span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">functions</span><span style="color:#CB7676;">?:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#BD976A;">number</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">number</span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">branches</span><span style="color:#CB7676;">?:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#BD976A;">number</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">number</span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">lines</span><span style="color:#CB7676;">?:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#BD976A;">number</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">number</span><span style="color:#666666;">]</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">statements</span><span style="color:#AB5959;">?:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B07D48;">number</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">number</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">functions</span><span style="color:#AB5959;">?:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B07D48;">number</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">number</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">branches</span><span style="color:#AB5959;">?:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B07D48;">number</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">number</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">lines</span><span style="color:#AB5959;">?:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B07D48;">number</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">number</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><ul><li><strong>Default:</strong></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">statements</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#4C9A91;">50</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">80</span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">functions</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#4C9A91;">50</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">80</span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">branches</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#4C9A91;">50</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">80</span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">lines</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#4C9A91;">50</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">80</span><span style="color:#666666;">]</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">statements</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">50</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">80</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">functions</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">50</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">80</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">branches</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">50</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">80</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">lines</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">50</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">80</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><ul><li><strong>Available for providers:</strong> <code>&#39;v8&#39; | &#39;istanbul&#39;</code></li></ul><p>Watermarks for statements, lines, branches and functions. See <a href="https://github.com/istanbuljs/nyc#high-and-low-watermarks" target="_blank" rel="noreferrer">istanbul documentation</a> for more information.</p><h4 id="coverage-customprovidermodule" tabindex="-1">coverage.customProviderModule <a class="header-anchor" href="#coverage-customprovidermodule" aria-label="Permalink to &quot;coverage.customProviderModule&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Available for providers:</strong> <code>&#39;custom&#39;</code></li><li><strong>CLI:</strong> <code>--coverage.customProviderModule=&lt;path or module name&gt;</code></li></ul><p>Specifies the module name or path for the custom coverage provider module. See <a href="/vitest.kr/guide/coverage.html#custom-coverage-provider">Guide - Custom Coverage Provider</a> for more information.</p>`,78),as={id:"testnamepattern",tabindex:"-1"},ls=s("a",{class:"header-anchor",href:"#testnamepattern","aria-label":'Permalink to "testNamePattern<NonProjectOption />"'},"​",-1),ts=a(`<ul><li><strong>Type</strong> <code>string | RegExp</code></li><li><strong>CLI:</strong> <code>-t &lt;pattern&gt;</code>, <code>--testNamePattern=&lt;pattern&gt;</code>, <code>--test-name-pattern=&lt;pattern&gt;</code></li></ul><p>Run tests with full names matching the pattern. If you add <code>OnlyRunThis</code> to this property, tests not containing the word <code>OnlyRunThis</code> in the test name will be skipped.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">expect</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">test</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// run</span></span>
<span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">OnlyRunThis</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#4D9375;">true</span><span style="color:#666666;">).</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#4D9375;">true</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// skipped</span></span>
<span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">doNotRun</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#4D9375;">true</span><span style="color:#666666;">).</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#4D9375;">true</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">expect</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">test</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// run</span></span>
<span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">OnlyRunThis</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#1E754F;">true</span><span style="color:#999999;">).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#1E754F;">true</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// skipped</span></span>
<span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">doNotRun</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#1E754F;">true</span><span style="color:#999999;">).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#1E754F;">true</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div>`,3),ps={id:"open",tabindex:"-1"},rs=s("a",{class:"header-anchor",href:"#open","aria-label":'Permalink to "open<NonProjectOption />"'},"​",-1),cs=a(`<ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>CLI:</strong> <code>--open</code>, <code>--open=false</code></li></ul><p>Open Vitest UI (WIP)</p><h3 id="api" tabindex="-1">api <a class="header-anchor" href="#api" aria-label="Permalink to &quot;api&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>boolean | number</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>CLI:</strong> <code>--api</code>, <code>--api.port</code>, <code>--api.host</code>, <code>--api.strictPort</code></li></ul><p>Listen to port and serve API. When set to true, the default port is 51204</p><h3 id="browser" tabindex="-1">browser <a class="header-anchor" href="#browser" aria-label="Permalink to &quot;browser&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>{ enabled?, name?, provider?, headless?, api?, slowHijackESM? }</code></li><li><strong>Default:</strong> <code>{ enabled: false, headless: p<wbr>rocess.env.CI, api: 63315 }</code></li><li><strong>Version:</strong> Since Vitest 0.29.4</li><li><strong>CLI:</strong> <code>--browser</code>, <code>--browser=&lt;name&gt;</code>, <code>--browser.name=chrome --browser.headless</code></li></ul><p>Run Vitest tests in a browser. We use <a href="https://webdriver.io/" target="_blank" rel="noreferrer">WebdriverIO</a> for running tests by default, but it can be configured with <a href="/vitest.kr/config/#browser-provider">browser.provider</a> option.</p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Read more about testing in a real browser in the <a href="/vitest.kr/guide/browser.html">guide page</a>.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This is an experimental feature. Breaking changes might not follow semver, please pin Vitest&#39;s version when using it.</p></div><h4 id="browser-enabled" tabindex="-1">browser.enabled <a class="header-anchor" href="#browser-enabled" aria-label="Permalink to &quot;browser.enabled&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>CLI:</strong> <code>--browser</code>, <code>--browser.enabled=false</code></li></ul><p>Run all tests inside a browser by default. Can be overriden with <a href="/vitest.kr/config/#poolmatchglobs"><code>poolMatchGlobs</code></a> option.</p><h4 id="browser-name" tabindex="-1">browser.name <a class="header-anchor" href="#browser-name" aria-label="Permalink to &quot;browser&amp;#46;name&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>CLI:</strong> <code>--browser=safari</code></li></ul><p>Run all tests in a specific browser. Possible options in different providers:</p><ul><li><code>webdriverio</code>: <code>firefox</code>, <code>chrome</code>, <code>edge</code>, <code>safari</code></li><li><code>playwright</code>: <code>firefox</code>, <code>webkit</code>, <code>chromium</code></li><li>custom: any string that will be passed to the provider</li></ul><h4 id="browser-headless" tabindex="-1">browser.headless <a class="header-anchor" href="#browser-headless" aria-label="Permalink to &quot;browser.headless&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>p<wbr>rocess.env.CI</code></li><li><strong>CLI:</strong> <code>--browser.headless</code>, <code>--brower.headless=false</code></li></ul><p>Run the browser in a <code>headless</code> mode. If you are running Vitest in CI, it will be enabled by default.</p><h4 id="browser-api" tabindex="-1">browser.api <a class="header-anchor" href="#browser-api" aria-label="Permalink to &quot;browser.api&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>number | { port?, strictPort?, host? }</code></li><li><strong>Default:</strong> <code>63315</code></li><li><strong>CLI:</strong> <code>--browser.api=63315</code>, <code>--browser.api.port=1234, --browser.api.host=example.com</code></li></ul><p>Configure options for Vite server that serves code in the browser. Does not affect <a href="/vitest.kr/config/#api"><code>test.api</code></a> option.</p><h4 id="browser-provider" tabindex="-1">browser.provider <a class="header-anchor" href="#browser-provider" aria-label="Permalink to &quot;browser.provider&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>&#39;webdriverio&#39; | &#39;playwright&#39; | string</code></li><li><strong>Default:</strong> <code>&#39;webdriverio&#39;</code></li><li><strong>CLI:</strong> <code>--browser.provider=playwright</code></li></ul><p>Path to a provider that will be used when running browser tests. Vitest provides two providers which are <code>webdriverio</code> (default) and <code>playwright</code>. Custom providers should be exported using <code>default</code> export and have this shape:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">interface</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">BrowserProvider</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">name</span><span style="color:#666666;">: </span><span style="color:#5DA994;">string</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">getSupportedBrowsers</span><span style="color:#666666;">():</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">readonly</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">string</span><span style="color:#666666;">[]</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">initialize</span><span style="color:#666666;">(</span><span style="color:#BD976A;">ctx</span><span style="color:#666666;">: </span><span style="color:#5DA994;">Vitest</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">options</span><span style="color:#666666;">: { </span><span style="color:#BD976A;">browser</span><span style="color:#666666;">: </span><span style="color:#5DA994;">string</span><span style="color:#666666;"> }):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Awaitable</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">void</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">openPage</span><span style="color:#666666;">(</span><span style="color:#BD976A;">url</span><span style="color:#666666;">: </span><span style="color:#5DA994;">string</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Awaitable</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">void</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">close</span><span style="color:#666666;">():</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Awaitable</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">void</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">BrowserProvider</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">name</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">getSupportedBrowsers</span><span style="color:#999999;">():</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">readonly</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">[]</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">initialize</span><span style="color:#999999;">(</span><span style="color:#B07D48;">ctx</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Vitest</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">options</span><span style="color:#999999;">: { </span><span style="color:#B07D48;">browser</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;"> }):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Awaitable</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">void</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">openPage</span><span style="color:#999999;">(</span><span style="color:#B07D48;">url</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Awaitable</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">void</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">close</span><span style="color:#999999;">():</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Awaitable</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">void</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This is an advanced API for library authors. If you just need to run tests in a browser, use the <a href="/vitest.kr/config/#browser">browser</a> option.</p></div><h4 id="browser-slowhijackesm" tabindex="-1">browser.slowHijackESM <a class="header-anchor" href="#browser-slowhijackesm" aria-label="Permalink to &quot;browser.slowHijackESM&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li><li><strong>Version:</strong> Since Vitest 0.31.0</li></ul><p>When running tests in Node.js Vitest can use its own module resolution to easily mock modules with <code>vi.mock</code> syntax. However it&#39;s not so easy to replicate ES module resolution in browser, so we need to transform your source files before browser can consume it.</p><p>This option has no effect on tests running inside Node.js.</p><p>This options is enabled by default when running in the browser. If you don&#39;t rely on spying on ES modules with <code>vi.spyOn</code> and don&#39;t use <code>vi.mock</code>, you can disable this to get a slight boost to performance.</p><h3 id="clearmocks" tabindex="-1">clearMocks <a class="header-anchor" href="#clearmocks" aria-label="Permalink to &quot;clearMocks&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>Will call <a href="/vitest.kr/api/mock.html#mockclear"><code>.mockClear()</code></a> on all spies before each test. This will clear mock history, but not reset its implementation to the default one.</p><h3 id="mockreset" tabindex="-1">mockReset <a class="header-anchor" href="#mockreset" aria-label="Permalink to &quot;mockReset&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>Will call <a href="/vitest.kr/api/mock.html#mockreset"><code>.mockReset()</code></a> on all spies before each test. This will clear mock history and reset its implementation to an empty function (will return <code>undefined</code>).</p><h3 id="restoremocks" tabindex="-1">restoreMocks <a class="header-anchor" href="#restoremocks" aria-label="Permalink to &quot;restoreMocks&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>Will call <a href="/vitest.kr/api/mock.html#mockrestore"><code>.mockRestore()</code></a> on all spies before each test. This will clear mock history and reset its implementation to the original one.</p><h3 id="unstubenvs" tabindex="-1">unstubEnvs <a class="header-anchor" href="#unstubenvs" aria-label="Permalink to &quot;unstubEnvs&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>Version:</strong> Since Vitest 0.26.0</li></ul><p>Will call <a href="/vitest.kr/api/vi.html#vi-unstuballenvs"><code>vi.unstubAllEnvs</code></a> before each test.</p><h3 id="unstubglobals" tabindex="-1">unstubGlobals <a class="header-anchor" href="#unstubglobals" aria-label="Permalink to &quot;unstubGlobals&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>Version:</strong> Since Vitest 0.26.0</li></ul><p>Will call <a href="/vitest.kr/api/vi.html#vi-unstuballglobals"><code>vi.unstubAllGlobals</code></a> before each test.</p><h3 id="testtransformmode" tabindex="-1">testTransformMode <a class="header-anchor" href="#testtransformmode" aria-label="Permalink to &quot;testTransformMode&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>{ web?, ssr? }</code></li><li><strong>Version:</strong> Since Vitest 0.34.0</li></ul><p>Determine the transform method for all modules inported inside a test that matches the glob pattern. By default, relies on the environment. For example, tests with JSDOM environment will process all files with <code>ssr: false</code> flag and tests with Node environment process all modules with <code>ssr: true</code>.</p><h4 id="testtransformmode-ssr" tabindex="-1">testTransformMode.ssr <a class="header-anchor" href="#testtransformmode-ssr" aria-label="Permalink to &quot;testTransformMode.ssr&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[]</code></li></ul><p>Use SSR transform pipeline for all modules inside specified tests.<br> Vite plugins will receive <code>ssr: true</code> flag when processing those files.</p><h4 id="testtransformmode-web" tabindex="-1">testTransformMode.web <a class="header-anchor" href="#testtransformmode-web" aria-label="Permalink to &quot;testTransformMode&amp;#46;web&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[]</code></li></ul><p>First do a normal transform pipeline (targeting browser), then do a SSR rewrite to run the code in Node.<br> Vite plugins will receive <code>ssr: false</code> flag when processing those files.</p>`,57),is={id:"snapshotformat",tabindex:"-1"},ds=s("a",{class:"header-anchor",href:"#snapshotformat","aria-label":'Permalink to "snapshotFormat<NonProjectOption />"'},"​",-1),ys=s("ul",null,[s("li",null,[s("strong",null,"Type:"),e(),s("code",null,"PrettyFormatOptions")])],-1),us=s("p",null,[e("Format options for snapshot testing. These options are passed down to "),s("a",{href:"https://www.npmjs.com/package/pretty-format",target:"_blank",rel:"noreferrer"},[s("code",null,"pretty-format")]),e(".")],-1),hs={id:"resolvesnapshotpath",tabindex:"-1"},gs=s("a",{class:"header-anchor",href:"#resolvesnapshotpath","aria-label":'Permalink to "resolveSnapshotPath<NonProjectOption />"'},"​",-1),fs=a(`<ul><li><strong>Type</strong>: <code>(testPath: string, snapExtension: string) =&gt; string</code></li><li><strong>Default</strong>: stores snapshot files in <code>__snapshots__</code> directory</li></ul><p>Overrides default snapshot path. For example, to store snapshots next to test files:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">defineConfig</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest/config</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">defineConfig</span><span style="color:#666666;">({</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">test</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#80A665;">resolveSnapshotPath</span><span style="color:#666666;">: (</span><span style="color:#BD976A;">testPath</span><span style="color:#666666;">, </span><span style="color:#BD976A;">snapExtension</span><span style="color:#666666;">) =&gt; </span><span style="color:#BD976A;">testPath</span><span style="color:#666666;"> </span><span style="color:#CB7676;">+</span><span style="color:#666666;"> </span><span style="color:#BD976A;">snapExtension</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">  },</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineConfig</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest/config</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#59873A;">defineConfig</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">test</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#59873A;">resolveSnapshotPath</span><span style="color:#999999;">: (</span><span style="color:#B07D48;">testPath</span><span style="color:#999999;">, </span><span style="color:#B07D48;">snapExtension</span><span style="color:#999999;">) =&gt; </span><span style="color:#B07D48;">testPath</span><span style="color:#999999;"> </span><span style="color:#AB5959;">+</span><span style="color:#999999;"> </span><span style="color:#B07D48;">snapExtension</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><h3 id="allowonly" tabindex="-1">allowOnly <a class="header-anchor" href="#allowonly" aria-label="Permalink to &quot;allowOnly&quot;">​</a></h3><ul><li><strong>Type</strong>: <code>boolean</code></li><li><strong>Default</strong>: <code>false</code></li><li><strong>CLI:</strong> <code>--allowOnly</code>, <code>--allowOnly=false</code></li></ul><p>Allow tests and suites that are marked as only.</p>`,6),ms={id:"dangerouslyignoreunhandlederrors",tabindex:"-1"},Ds=s("a",{class:"header-anchor",href:"#dangerouslyignoreunhandlederrors","aria-label":'Permalink to "dangerouslyIgnoreUnhandledErrors<NonProjectOption />"'},"​",-1),As=a("<ul><li><strong>Type</strong>: <code>boolean</code></li><li><strong>Default</strong>: <code>false</code></li><li><strong>CLI:</strong> <code>--dangerouslyIgnoreUnhandledErrors</code> <code>--dangerouslyIgnoreUnhandledErrors=false</code></li></ul><p>Ignore any unhandled errors that occur.</p>",2),bs={id:"passwithnotests",tabindex:"-1"},vs=s("a",{class:"header-anchor",href:"#passwithnotests","aria-label":'Permalink to "passWithNoTests<NonProjectOption />"'},"​",-1),Cs=a('<ul><li><strong>Type</strong>: <code>boolean</code></li><li><strong>Default</strong>: <code>false</code></li><li><strong>CLI:</strong> <code>--passWithNoTests</code>, <code>--passWithNoTests=false</code></li></ul><p>Vitest will not fail, if no tests will be found.</p><h3 id="logheapusage" tabindex="-1">logHeapUsage <a class="header-anchor" href="#logheapusage" aria-label="Permalink to &quot;logHeapUsage&quot;">​</a></h3><ul><li><strong>Type</strong>: <code>boolean</code></li><li><strong>Default</strong>: <code>false</code></li><li><strong>CLI:</strong> <code>--logHeapUsage</code>, <code>--logHeapUsage=false</code></li></ul><p>Show heap usage after each test. Useful for debugging memory leaks.</p><h3 id="css" tabindex="-1">css <a class="header-anchor" href="#css" aria-label="Permalink to &quot;css&quot;">​</a></h3><ul><li><strong>Type</strong>: <code>boolean | { include?, exclude?, modules? }</code></li></ul><p>Configure if CSS should be processed. When excluded, CSS files will be replaced with empty strings to bypass the subsequent processing. CSS Modules will return a proxy to not affect runtime.</p><h4 id="css-include" tabindex="-1">css.include <a class="header-anchor" href="#css-include" aria-label="Permalink to &quot;css.include&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>RegExp | RegExp[]</code></li><li><strong>Default</strong>: <code>[]</code></li></ul><p>RegExp pattern for files that should return actual CSS and will be processed by Vite pipeline.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To process all CSS files, use <code>/.+/</code>.</p></div><h4 id="css-exclude" tabindex="-1">css.exclude <a class="header-anchor" href="#css-exclude" aria-label="Permalink to &quot;css.exclude&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>RegExp | RegExp[]</code></li><li><strong>Default</strong>: <code>[]</code></li></ul><p>RegExp pattern for files that will return an empty CSS file.</p><h4 id="css-modules" tabindex="-1">css.modules <a class="header-anchor" href="#css-modules" aria-label="Permalink to &quot;css.modules&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>{ classNameStrategy? }</code></li><li><strong>Default</strong>: <code>{}</code></li></ul><h4 id="css-modules-classnamestrategy" tabindex="-1">css.modules.classNameStrategy <a class="header-anchor" href="#css-modules-classnamestrategy" aria-label="Permalink to &quot;css.modules.classNameStrategy&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>&#39;stable&#39; | &#39;scoped&#39; | &#39;non-scoped&#39;</code></li><li><strong>Default</strong>: <code>&#39;stable&#39;</code></li></ul><p>If you decide to process CSS files, you can configure if class names inside CSS modules should be scoped. You can choose one of the options:</p><ul><li><code>stable</code>: class names will be generated as <code>_${name}_${hashedFilename}</code>, which means that generated class will stay the same, if CSS content is changed, but will change, if the name of the file is modified, or file is moved to another folder. This setting is useful, if you use snapshot feature.</li><li><code>scoped</code>: class names will be generated as usual, respecting <code>css.modules.generateScopeName</code> method, if you have one and CSS processing is enabled. By default, filename will be generated as <code>_${name}_${hash}</code>, where hash includes filename and content of the file.</li><li><code>non-scoped</code>: class names will not be hashed.</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>By default, Vitest exports a proxy, bypassing CSS Modules processing. If you rely on CSS properties on your classes, you have to enable CSS processing using <code>include</code> option.</p></div><h3 id="maxconcurrency" tabindex="-1">maxConcurrency <a class="header-anchor" href="#maxconcurrency" aria-label="Permalink to &quot;maxConcurrency&quot;">​</a></h3><ul><li><strong>Type</strong>: <code>number</code></li><li><strong>Default</strong>: <code>5</code></li></ul><p>A number of tests that are allowed to run at the same time marked with <code>test.concurrent</code>.</p><p>Test above this limit will be queued to run when available slot appears.</p>',26),Bs={id:"cache",tabindex:"-1"},Es=s("a",{class:"header-anchor",href:"#cache","aria-label":'Permalink to "cache<NonProjectOption />"'},"​",-1),ks=a('<ul><li><strong>Type</strong>: <code>false | { dir? }</code></li></ul><p>Options to configure Vitest cache policy. At the moment Vitest stores cache for test results to run the longer and failed tests first.</p><h4 id="cache-dir" tabindex="-1">cache.dir <a class="header-anchor" href="#cache-dir" aria-label="Permalink to &quot;cache.dir&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>string</code></li><li><strong>Default</strong>: <code>node_modules/.vitest</code></li></ul><p>Path to cache directory.</p><h3 id="sequence" tabindex="-1">sequence <a class="header-anchor" href="#sequence" aria-label="Permalink to &quot;sequence&quot;">​</a></h3><ul><li><strong>Type</strong>: <code>{ sequencer?, shuffle?, seed?, hooks?, setupFiles? }</code></li></ul><p>Options for how tests should be sorted.</p><p>You can provide sequence options to CLI with dot notation:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">npx</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">vitest</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C99076;">--sequence.shuffle</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C99076;">--sequence.seed=1000</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">npx</span><span style="color:#393A34;"> </span><span style="color:#B56959;">vitest</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">--sequence.shuffle</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">--sequence.seed=1000</span></span></code></pre></div>',10),_s={id:"sequence-sequencer",tabindex:"-1"},ws=s("a",{class:"header-anchor",href:"#sequence-sequencer","aria-label":'Permalink to "sequence.sequencer<NonProjectOption />"'},"​",-1),Ts=a('<ul><li><strong>Type</strong>: <code>TestSequencerConstructor</code></li><li><strong>Default</strong>: <code>BaseSequencer</code></li></ul><p>A custom class that defines methods for sharding and sorting. You can extend <code>BaseSequencer</code> from <code>vitest/node</code>, if you only need to redefine one of the <code>sort</code> and <code>shard</code> methods, but both should exist.</p><p>Sharding is happening before sorting, and only if <code>--shard</code> option is provided.</p><h4 id="sequence-shuffle" tabindex="-1">sequence.shuffle <a class="header-anchor" href="#sequence-shuffle" aria-label="Permalink to &quot;sequence.shuffle&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>boolean</code></li><li><strong>Default</strong>: <code>false</code></li><li><strong>CLI</strong>: <code>--sequence.shuffle</code>, <code>--sequence.shuffle=false</code></li></ul><p>If you want tests to run randomly, you can enable it with this option, or CLI argument <a href="/vitest.kr/guide/cli.html"><code>--sequence.shuffle</code></a>.</p><p>Vitest usually uses cache to sort tests, so long running tests start earlier - this makes tests run faster. If your tests will run in random order you will lose this performance improvement, but it may be useful to track tests that accidentally depend on another run previously.</p><h4 id="sequence-concurrent" tabindex="-1">sequence.concurrent <a class="header-anchor" href="#sequence-concurrent" aria-label="Permalink to &quot;sequence.concurrent&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>boolean</code></li><li><strong>Default</strong>: <code>false</code></li><li><strong>CLI</strong>: <code>--sequence.concurrent</code>, <code>--sequence.concurrent=false</code></li><li><strong>Version</strong>: Since Vitest 0.32.2</li></ul><p>If you want tests to run in parallel, you can enable it with this option, or CLI argument <a href="/vitest.kr/guide/cli.html"><code>--sequence.concurrent</code></a>.</p>',10),xs={id:"sequence-seed",tabindex:"-1"},qs=s("a",{class:"header-anchor",href:"#sequence-seed","aria-label":'Permalink to "sequence.seed<NonProjectOption />"'},"​",-1),Ps=a('<ul><li><strong>Type</strong>: <code>number</code></li><li><strong>Default</strong>: <code>Date.now()</code></li><li><strong>CLI</strong>: <code>--sequence.seed=1000</code></li></ul><p>Sets the randomization seed, if tests are running in random order.</p><h4 id="sequence-hooks" tabindex="-1">sequence.hooks <a class="header-anchor" href="#sequence-hooks" aria-label="Permalink to &quot;sequence.hooks&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>&#39;stack&#39; | &#39;list&#39; | &#39;parallel&#39;</code></li><li><strong>Default</strong>: <code>&#39;parallel&#39;</code></li><li><strong>CLI</strong>: <code>--sequence.hooks=&lt;value&gt;</code></li></ul><p>Changes the order in which hooks are executed.</p><ul><li><code>stack</code> will order &quot;after&quot; hooks in reverse order, &quot;before&quot; hooks will run in the order they were defined</li><li><code>list</code> will order all hooks in the order they are defined</li><li><code>parallel</code> will run hooks in a single group in parallel (hooks in parent suites will still run before the current suite&#39;s hooks)</li></ul><h4 id="sequence-setupfiles" tabindex="-1">sequence.setupFiles <a class="header-anchor" href="#sequence-setupfiles" aria-label="Permalink to &quot;sequence.setupFiles&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>&#39;list&#39; | &#39;parallel&#39;</code></li><li><strong>Default</strong>: <code>&#39;parallel&#39;</code></li><li><strong>CLI</strong>: <code>--sequence.setupFiles=&lt;value&gt;</code></li><li><strong>Version</strong>: Since Vitest 0.29.3</li></ul><p>Changes the order in which setup files are executed.</p><ul><li><code>list</code> will run setup files in the order they are defined</li><li><code>parallel</code> will run setup files in parallel</li></ul><h3 id="typecheck" tabindex="-1">typecheck <a class="header-anchor" href="#typecheck" aria-label="Permalink to &quot;typecheck&quot;">​</a></h3><p>Options for configuring <a href="/vitest.kr/guide/testing-types.html">typechecking</a> test environment.</p><h4 id="typecheck-checker" tabindex="-1">typecheck.checker <a class="header-anchor" href="#typecheck-checker" aria-label="Permalink to &quot;typecheck.checker&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>&#39;tsc&#39; | &#39;vue-tsc&#39; | string</code></li><li><strong>Default</strong>: <code>tsc</code></li></ul><p>What tools to use for type checking. Vitest will spawn a process with certain parameters for easier parsing, depending on the type. Checker should implement the same output format as <code>tsc</code>.</p><p>You need to have a package installed to use typechecker:</p><ul><li><code>tsc</code> requires <code>typescript</code> package</li><li><code>vue-tsc</code> requires <code>vue-tsc</code> package</li></ul><p>You can also pass down a path to custom binary or command name that produces the same output as <code>tsc --noEmit --pretty false</code>.</p><h4 id="typecheck-include" tabindex="-1">typecheck.include <a class="header-anchor" href="#typecheck-include" aria-label="Permalink to &quot;typecheck.include&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>string[]</code></li><li><strong>Default</strong>: <code>[&#39;**/*.{test,spec}-d.?(c|m)[jt]s?(x)&#39;]</code></li></ul><p>Glob pattern for files that should be treated as test files</p><h4 id="typecheck-exclude" tabindex="-1">typecheck.exclude <a class="header-anchor" href="#typecheck-exclude" aria-label="Permalink to &quot;typecheck.exclude&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>string[]</code></li><li><strong>Default</strong>: <code>[&#39;**/node_modules/**&#39;, &#39;**/dist/**&#39;, &#39;**/cypress/**&#39;, &#39;**/.{idea,git,cache,output,temp}/**&#39;]</code></li></ul><p>Glob pattern for files that should not be treated as test files</p><h4 id="typecheck-allowjs" tabindex="-1">typecheck.allowJs <a class="header-anchor" href="#typecheck-allowjs" aria-label="Permalink to &quot;typecheck.allowJs&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>boolean</code></li><li><strong>Default</strong>: <code>false</code></li></ul><p>Check JS files that have <code>@ts-check</code> comment. If you have it enabled in tsconfig, this will not overwrite it.</p><h4 id="typecheck-ignoresourceerrors" tabindex="-1">typecheck.ignoreSourceErrors <a class="header-anchor" href="#typecheck-ignoresourceerrors" aria-label="Permalink to &quot;typecheck.ignoreSourceErrors&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>boolean</code></li><li><strong>Default</strong>: <code>false</code></li></ul><p>Do not fail, if Vitest found errors outside the test files. This will not show you non-test errors at all.</p><p>By default, if Vitest finds source error, it will fail test suite.</p><h4 id="typecheck-tsconfig" tabindex="-1">typecheck.tsconfig <a class="header-anchor" href="#typecheck-tsconfig" aria-label="Permalink to &quot;typecheck.tsconfig&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>string</code></li><li><strong>Default</strong>: <em>tries to find closest tsconfig.json</em></li></ul><p>Path to custom tsconfig, relative to the project root.</p>',34),Ss={id:"slowtestthreshold",tabindex:"-1"},Is=s("a",{class:"header-anchor",href:"#slowtestthreshold","aria-label":'Permalink to "slowTestThreshold<NonProjectOption />"'},"​",-1),js=a('<ul><li><strong>Type</strong>: <code>number</code></li><li><strong>Default</strong>: <code>300</code></li></ul><p>The number of milliseconds after which a test is considered slow and reported as such in the results.</p><h3 id="chaiconfig" tabindex="-1">chaiConfig <a class="header-anchor" href="#chaiconfig" aria-label="Permalink to &quot;chaiConfig&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>{ includeStack?, showDiff?, truncateThreshold? }</code></li><li><strong>Default:</strong> <code>{ includeStack: false, showDiff: true, truncateThreshold: 40 }</code></li><li><strong>Version:</strong> Since Vitest 0.30.0</li></ul><p>Equivalent to <a href="https://github.com/chaijs/chai/blob/4.x.x/lib/chai/config.js" target="_blank" rel="noreferrer">Chai config</a>.</p><h4 id="chaiconfig-includestack" tabindex="-1">chaiConfig.includeStack <a class="header-anchor" href="#chaiconfig-includestack" aria-label="Permalink to &quot;chaiConfig.includeStack&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>Influences whether stack trace is included in Assertion error message. Default of false suppresses stack trace in the error message.</p><h4 id="chaiconfig-showdiff" tabindex="-1">chaiConfig.showDiff <a class="header-anchor" href="#chaiconfig-showdiff" aria-label="Permalink to &quot;chaiConfig.showDiff&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li></ul><p>Influences whether or not the <code>showDiff</code> flag should be included in the thrown AssertionErrors. <code>false</code> will always be <code>false</code>; <code>true</code> will be true when the assertion has requested a diff to be shown.</p><h4 id="chaiconfig-truncatethreshold" tabindex="-1">chaiConfig.truncateThreshold <a class="header-anchor" href="#chaiconfig-truncatethreshold" aria-label="Permalink to &quot;chaiConfig.truncateThreshold&quot;">​</a></h4><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Default:</strong> <code>40</code></li></ul><p>Sets length threshold for actual and expected values in assertion errors. If this threshold is exceeded, for example for large data structures, the value is replaced with something like <code>[ Array(3) ]</code> or <code>{ Object (prop1, prop2) }</code>. Set it to <code>0</code> if you want to disable truncating altogether.</p><p>This config option affects truncating values in <code>test.each</code> titles and inside the assertion error message.</p><h3 id="bail" tabindex="-1">bail <a class="header-anchor" href="#bail" aria-label="Permalink to &quot;bail&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Default:</strong> <code>0</code></li><li><strong>CLI</strong>: <code>--bail=&lt;value&gt;</code></li><li><strong>Version:</strong> Since Vitest 0.31.0</li></ul><p>Stop test execution when given number of tests have failed.</p><p>By default Vitest will run all of your test cases even if some of them fail. This may not be desired for CI builds where you are only interested in 100% successful builds and would like to stop test execution as early as possible when test failures occur. The <code>bail</code> option can be used to speed up CI runs by preventing it from running more tests when failures have occured.</p><h3 id="retry" tabindex="-1">retry <a class="header-anchor" href="#retry" aria-label="Permalink to &quot;retry&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Default:</strong> <code>0</code></li><li><strong>CLI:</strong> <code>--retry=&lt;value&gt;</code></li><li><strong>Version:</strong> Since Vitest 0.32.3</li></ul><p>Retry the test specific number of times if it fails.</p>',22);function Vs(Fs,Ns,Rs,Os,Ls,Ms){const o=l;return p(),r("div",null,[i,s("div",d,[y,s("p",null,[e("All configuration options that are not supported inside a "),u,e(" project config have "),n(o),e(" sign next to them.")])]),h,s("h4",g,[e("deps.registerNodeLoader"),n(o),e(),f]),m,s("h3",D,[e("update"),n(o),e(),A]),b,s("h3",v,[e("watch"),n(o),e(),C]),B,s("h3",E,[e("reporters"),n(o),e(),k]),_,s("h3",w,[e("outputFile"),n(o),e(),T]),x,s("h3",q,[e("maxThreads"),n(o),e(),P]),S,I,s("h3",j,[e("minThreads"),n(o),e(),V]),F,N,s("h3",R,[e("useAtomics"),n(o),e(),O]),L,s("h3",M,[e("teardownTimeout"),n(o),e(),W]),U,z,s("h3",G,[e("silent"),n(o),e(),J]),Y,s("h3",H,[e("watchExclude"),n(o),e(),$]),X,K,s("h3",Q,[e("forceRerunTriggers"),n(o),e(),Z]),ss,s("h3",es,[e("coverage"),n(o),e(),os]),ns,s("h3",as,[e("testNamePattern"),n(o),e(),ls]),ts,s("h3",ps,[e("open"),n(o),e(),rs]),cs,s("h3",is,[e("snapshotFormat"),n(o),e(),ds]),ys,us,s("h3",hs,[e("resolveSnapshotPath"),n(o),e(),gs]),fs,s("h3",ms,[e("dangerouslyIgnoreUnhandledErrors"),n(o),e(),Ds]),As,s("h3",bs,[e("passWithNoTests"),n(o),e(),vs]),Cs,s("h3",Bs,[e("cache"),n(o),e(),Es]),ks,s("h4",_s,[e("sequence.sequencer"),n(o),e(),ws]),Ts,s("h4",xs,[e("sequence.seed"),n(o),e(),qs]),Ps,s("h3",Ss,[e("slowTestThreshold"),n(o),e(),Is]),js])}const Gs=t(c,[["render",Vs]]);export{zs as __pageData,Gs as default};
