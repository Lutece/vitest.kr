import{_ as p}from"./chunks/CourseLink.vue_vue_type_script_setup_true_lang.d75f281c.js";import{_ as o,j as l,k as e,L as t,x as c,C as s,p as a,V as r}from"./chunks/framework.8939a477.js";const E=JSON.parse('{"title":"Snapshot | Guide","description":"","frontmatter":{"title":"Snapshot | Guide"},"headers":[],"relativePath":"guide/snapshot.md","filePath":"guide/snapshot.md","lastUpdated":1690470465000}'),y={name:"guide/snapshot.md"},i=s("h1",{id:"snapshot",tabindex:"-1"},[a("Snapshot "),s("a",{class:"header-anchor",href:"#snapshot","aria-label":'Permalink to "Snapshot"'},"​")],-1),h=r(`<p>Snapshot tests are a very useful tool whenever you want to make sure the output of your functions does not change unexpectedly.</p><p>When using snapshot, Vitest will take a snapshot of the given value, then compares it to a reference snapshot file stored alongside the test. The test will fail if the two snapshots do not match: either the change is unexpected, or the reference snapshot needs to be updated to the new version of the result.</p><h2 id="use-snapshots" tabindex="-1">Use Snapshots <a class="header-anchor" href="#use-snapshots" aria-label="Permalink to &quot;Use Snapshots&quot;">​</a></h2><p>To snapshot a value, you can use the <a href="/vitest.kr/api/expect.html#tomatchsnapshot"><code>toMatchSnapshot()</code></a> from <code>expect()</code> API:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">expect</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">it</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">it</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">toUpperCase</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">result</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#80A665;">toUpperCase</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">foobar</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">result</span><span style="color:#666666;">).</span><span style="color:#80A665;">toMatchSnapshot</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">expect</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">it</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">it</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">toUpperCase</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">result</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">toUpperCase</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">foobar</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">result</span><span style="color:#999999;">).</span><span style="color:#59873A;">toMatchSnapshot</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>The first time this test is run, Vitest creates a snapshot file that looks like this:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B8A965;">exports</span><span style="color:#666666;">[</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">toUpperCase 1</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">]</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">&quot;FOOBAR&quot;</span><span style="color:#C98A7D99;">&#39;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#998418;">exports</span><span style="color:#999999;">[</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">toUpperCase 1</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">&quot;FOOBAR&quot;</span><span style="color:#B5695999;">&#39;</span></span></code></pre></div><p>The snapshot artifact should be committed alongside code changes, and reviewed as part of your code review process. On subsequent test runs, Vitest will compare the rendered output with the previous snapshot. If they match, the test will pass. If they don&#39;t match, either the test runner found a bug in your code that should be fixed, or the implementation has changed and the snapshot needs to be updated.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>When using Snapshots with async concurrent tests, <code>expect</code> from the local <a href="/vitest.kr/guide/test-context.html">Test Context</a> must be used to ensure the right test is detected.</p></div><h2 id="inline-snapshots" tabindex="-1">Inline Snapshots <a class="header-anchor" href="#inline-snapshots" aria-label="Permalink to &quot;Inline Snapshots&quot;">​</a></h2><p>Similarly, you can use the <a href="/vitest.kr/api/expect.html#tomatchinlinesnapshot"><code>toMatchInlineSnapshot()</code></a> to store the snapshot inline within the test file.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">expect</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">it</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">it</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">toUpperCase</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">result</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#80A665;">toUpperCase</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">foobar</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">result</span><span style="color:#666666;">).</span><span style="color:#80A665;">toMatchInlineSnapshot</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">expect</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">it</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">it</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">toUpperCase</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">result</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">toUpperCase</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">foobar</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">result</span><span style="color:#999999;">).</span><span style="color:#59873A;">toMatchInlineSnapshot</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>Instead of creating a snapshot file, Vitest will modify the test file directly to update the snapshot as a string:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">expect</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">it</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">it</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">toUpperCase</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">result</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#80A665;">toUpperCase</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">foobar</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">result</span><span style="color:#666666;">).</span><span style="color:#80A665;">toMatchInlineSnapshot</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">&quot;FOOBAR&quot;</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">expect</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">it</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">it</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">toUpperCase</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">result</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">toUpperCase</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">foobar</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">result</span><span style="color:#999999;">).</span><span style="color:#59873A;">toMatchInlineSnapshot</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">&quot;FOOBAR&quot;</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>This allows you to see the expected output directly without jumping across different files.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>When using Snapshots with async concurrent tests, <code>expect</code> from the local <a href="/vitest.kr/guide/test-context.html">Test Context</a> must be used to ensure the right test is detected.</p></div><h2 id="updating-snapshots" tabindex="-1">Updating Snapshots <a class="header-anchor" href="#updating-snapshots" aria-label="Permalink to &quot;Updating Snapshots&quot;">​</a></h2><p>When the received value doesn&#39;t match the snapshot, the test fails and shows you the difference between them. When the snapshot change is expected, you may want to update the snapshot from the current state.</p><p>In watch mode, you can press the <code>u</code> key in the terminal to update the failed snapshot directly.</p><p>Or you can use the <code>--update</code> or <code>-u</code> flag in the CLI to make Vitest update snapshots.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">vitest</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C99076;">-u</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">vitest</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">-u</span></span></code></pre></div><h2 id="file-snapshots" tabindex="-1">File Snapshots <a class="header-anchor" href="#file-snapshots" aria-label="Permalink to &quot;File Snapshots&quot;">​</a></h2><p>When calling <code>toMatchSnapshot()</code>, we store all snapshots in a formatted snap file. That means we need to escaping some characters (namely the double-quote <code>&quot;</code> and backtick \`\`\`) in the snapshot string. Meanwhile, you might lose the syntax highlighting for the snapshot content (if they are in some language).</p><p>To improve this case, we introduce <a href="/vitest.kr/api/expect.html#tomatchfilesnapshot"><code>toMatchFileSnapshot()</code></a> to explicitly snapshot in a file. This allows you to assign any file extension to the snapshot file, and making them more readable.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">expect</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">it</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">it</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">render basic</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">async</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">result</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#80A665;">renderHTML</span><span style="color:#666666;">(</span><span style="color:#80A665;">h</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">div</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#666666;">{ </span><span style="color:#B8A965;">class</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">foo</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;"> }))</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">await</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">result</span><span style="color:#666666;">).</span><span style="color:#80A665;">toMatchFileSnapshot</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./test/basic.output.html</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">expect</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">it</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">it</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">render basic</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">async</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">result</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">renderHTML</span><span style="color:#999999;">(</span><span style="color:#59873A;">h</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">div</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{ </span><span style="color:#998418;">class</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">foo</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;"> }))</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">await</span><span style="color:#393A34;"> </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">result</span><span style="color:#999999;">).</span><span style="color:#59873A;">toMatchFileSnapshot</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./test/basic.output.html</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>It will compare with the content of <code>./test/basic.output.html</code>. And can be written back with the <code>--update</code> flag.</p><h2 id="image-snapshots" tabindex="-1">Image Snapshots <a class="header-anchor" href="#image-snapshots" aria-label="Permalink to &quot;Image Snapshots&quot;">​</a></h2><p>It&#39;s also possible to snapshot images using <a href="https://github.com/americanexpress/jest-image-snapshot" target="_blank" rel="noreferrer"><code>jest-image-snapshot</code></a>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">npm</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">i</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C99076;">-D</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">jest-image-snapshot</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">npm</span><span style="color:#393A34;"> </span><span style="color:#B56959;">i</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">-D</span><span style="color:#393A34;"> </span><span style="color:#B56959;">jest-image-snapshot</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">image snapshot</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#80A665;">readFileSync</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./test/stubs/input-image.png</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">))</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#666666;">.</span><span style="color:#80A665;">toMatchImageSnapshot</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">image snapshot</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#59873A;">readFileSync</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./test/stubs/input-image.png</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">))</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">.</span><span style="color:#59873A;">toMatchImageSnapshot</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>You can learn more in the <a href="https://github.com/vitest-dev/vitest/blob/main/examples/image-snapshot" target="_blank" rel="noreferrer"><code>examples/image-snapshot</code></a> example.</p><h2 id="custom-serializer" tabindex="-1">Custom Serializer <a class="header-anchor" href="#custom-serializer" aria-label="Permalink to &quot;Custom Serializer&quot;">​</a></h2><p>You can add your own logic to alter how your snapshots are serialized. Like Jest, Vitest has default serializers for built-in JavaScript types, HTML elements, ImmutableJS and for React elements.</p><p>Example serializer module:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#BD976A;">expect</span><span style="color:#666666;">.</span><span style="color:#80A665;">addSnapshotSerializer</span><span style="color:#666666;">({</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#80A665;">serialize</span><span style="color:#666666;">(</span><span style="color:#BD976A;">val</span><span style="color:#666666;">, </span><span style="color:#BD976A;">config</span><span style="color:#666666;">, </span><span style="color:#BD976A;">indentation</span><span style="color:#666666;">, </span><span style="color:#BD976A;">depth</span><span style="color:#666666;">, </span><span style="color:#BD976A;">refs</span><span style="color:#666666;">, </span><span style="color:#BD976A;">printer</span><span style="color:#666666;">) {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#758575DD;">// \`printer\` is a function that serializes a value using existing plugins.</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#4D9375;">return</span><span style="color:#666666;"> </span><span style="color:#C98A7D99;">\`</span><span style="color:#C98A7D;">Pretty foo: </span><span style="color:#666666;">\${</span><span style="color:#80A665;">printer</span><span style="color:#666666;">(</span><span style="color:#C98A7D;">val</span><span style="color:#666666;">.</span><span style="color:#C98A7D;">foo</span><span style="color:#666666;">)</span><span style="color:#666666;">}</span><span style="color:#C98A7D99;">\`</span></span>
<span class="line"><span style="color:#666666;">  },</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#BD976A;">val</span><span style="color:#666666;">) {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#4D9375;">return</span><span style="color:#666666;"> </span><span style="color:#BD976A;">val</span><span style="color:#666666;"> </span><span style="color:#CB7676;">&amp;&amp;</span><span style="color:#666666;"> </span><span style="color:#B8A965;">Object</span><span style="color:#666666;">.</span><span style="color:#B8A965;">prototype</span><span style="color:#666666;">.</span><span style="color:#BD976A;">hasOwnProperty</span><span style="color:#666666;">.</span><span style="color:#80A665;">call</span><span style="color:#666666;">(</span><span style="color:#BD976A;">val</span><span style="color:#666666;">, </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">foo</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">  },</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">expect</span><span style="color:#999999;">.</span><span style="color:#59873A;">addSnapshotSerializer</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">serialize</span><span style="color:#999999;">(</span><span style="color:#B07D48;">val</span><span style="color:#999999;">, </span><span style="color:#B07D48;">config</span><span style="color:#999999;">, </span><span style="color:#B07D48;">indentation</span><span style="color:#999999;">, </span><span style="color:#B07D48;">depth</span><span style="color:#999999;">, </span><span style="color:#B07D48;">refs</span><span style="color:#999999;">, </span><span style="color:#B07D48;">printer</span><span style="color:#999999;">) {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// \`printer\` is a function that serializes a value using existing plugins.</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#1E754F;">return</span><span style="color:#999999;"> </span><span style="color:#B5695999;">\`</span><span style="color:#B56959;">Pretty foo: </span><span style="color:#999999;">\${</span><span style="color:#59873A;">printer</span><span style="color:#999999;">(</span><span style="color:#B56959;">val</span><span style="color:#999999;">.</span><span style="color:#B56959;">foo</span><span style="color:#999999;">)</span><span style="color:#999999;">}</span><span style="color:#B5695999;">\`</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B07D48;">val</span><span style="color:#999999;">) {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#1E754F;">return</span><span style="color:#999999;"> </span><span style="color:#B07D48;">val</span><span style="color:#999999;"> </span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#999999;"> </span><span style="color:#998418;">Object</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hasOwnProperty</span><span style="color:#999999;">.</span><span style="color:#59873A;">call</span><span style="color:#999999;">(</span><span style="color:#B07D48;">val</span><span style="color:#999999;">, </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">foo</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>After adding a test like this:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">foo snapshot test</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">bar</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">foo</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#B8A965;">x</span><span style="color:#666666;">: </span><span style="color:#4C9A91;">1</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#B8A965;">y</span><span style="color:#666666;">: </span><span style="color:#4C9A91;">2</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">    },</span></span>
<span class="line"><span style="color:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">bar</span><span style="color:#666666;">).</span><span style="color:#80A665;">toMatchSnapshot</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">foo snapshot test</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">bar</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">foo</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#998418;">x</span><span style="color:#999999;">: </span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#998418;">y</span><span style="color:#999999;">: </span><span style="color:#2F798A;">2</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">    },</span></span>
<span class="line"><span style="color:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">bar</span><span style="color:#999999;">).</span><span style="color:#59873A;">toMatchSnapshot</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>You will get the following snapshot:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#dbd7caee;">Pretty foo: Object {</span></span>
<span class="line"><span style="color:#dbd7caee;">  &quot;x&quot;: 1,</span></span>
<span class="line"><span style="color:#dbd7caee;">  &quot;y&quot;: 2,</span></span>
<span class="line"><span style="color:#dbd7caee;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#393a34;">Pretty foo: Object {</span></span>
<span class="line"><span style="color:#393a34;">  &quot;x&quot;: 1,</span></span>
<span class="line"><span style="color:#393a34;">  &quot;y&quot;: 2,</span></span>
<span class="line"><span style="color:#393a34;">}</span></span></code></pre></div><p>We are using Jest&#39;s <code>pretty-format</code> for serializing snapshots. You can read more about it here: <a href="https://github.com/facebook/jest/blob/main/packages/pretty-format/README.md#serialize" target="_blank" rel="noreferrer">pretty-format</a>.</p><h2 id="difference-from-jest" tabindex="-1">Difference from Jest <a class="header-anchor" href="#difference-from-jest" aria-label="Permalink to &quot;Difference from Jest&quot;">​</a></h2><p>Vitest provides an almost compatible Snapshot feature with <a href="https://jestjs.io/docs/snapshot-testing" target="_blank" rel="noreferrer">Jest&#39;s</a> with a few exceptions:</p><h4 id="_1-comment-header-in-the-snapshot-file-is-different" tabindex="-1">1. Comment header in the snapshot file is different <a class="header-anchor" href="#_1-comment-header-in-the-snapshot-file-is-different" aria-label="Permalink to &quot;1. Comment header in the snapshot file is different&quot;">​</a></h4><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">- // Jest Snapshot v1, https://goo.gl/fbAQLP</span></span>
<span class="line"><span style="color:#85E89D;">+ // Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">- // Jest Snapshot v1, https://goo.gl/fbAQLP</span></span>
<span class="line"><span style="color:#22863A;">+ // Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html</span></span></code></pre></div><p>This does not really affect the functionality but might affect your commit diff when migrating from Jest.</p><h4 id="_2-printbasicprototype-is-default-to-false" tabindex="-1">2. <code>printBasicPrototype</code> is default to <code>false</code> <a class="header-anchor" href="#_2-printbasicprototype-is-default-to-false" aria-label="Permalink to &quot;2. \`printBasicPrototype\` is default to \`false\`&quot;">​</a></h4><p>Both Jest and Vitest&#39;s snapshots are powered by <a href="https://github.com/facebook/jest/blob/main/packages/pretty-format" target="_blank" rel="noreferrer"><code>pretty-format</code></a>. In Vitest we set <code>printBasicPrototype</code> default to <code>false</code> to provide a cleaner snapshot output, while in Jest &lt;29.0.0 it&#39;s <code>true</code> by default.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">expect</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">test</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">snapshot</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">bar</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#666666;">[</span></span>
<span class="line"><span style="color:#CB7676;">    </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#B8A965;">foo</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">bar</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">    },</span></span>
<span class="line"><span style="color:#CB7676;">  </span><span style="color:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// in Jest</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">bar</span><span style="color:#666666;">).</span><span style="color:#80A665;">toMatchInlineSnapshot</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">\`</span></span>
<span class="line"><span style="color:#C98A7D;">    Array [</span></span>
<span class="line"><span style="color:#C98A7D;">      Object {</span></span>
<span class="line"><span style="color:#C98A7D;">        &quot;foo&quot;: &quot;bar&quot;,</span></span>
<span class="line"><span style="color:#C98A7D;">      },</span></span>
<span class="line"><span style="color:#C98A7D;">    ]</span></span>
<span class="line"><span style="color:#C98A7D;">  </span><span style="color:#C98A7D99;">\`</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// in Vitest</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">bar</span><span style="color:#666666;">).</span><span style="color:#80A665;">toMatchInlineSnapshot</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">\`</span></span>
<span class="line"><span style="color:#C98A7D;">    [</span></span>
<span class="line"><span style="color:#C98A7D;">      {</span></span>
<span class="line"><span style="color:#C98A7D;">        &quot;foo&quot;: &quot;bar&quot;,</span></span>
<span class="line"><span style="color:#C98A7D;">      },</span></span>
<span class="line"><span style="color:#C98A7D;">    ]</span></span>
<span class="line"><span style="color:#C98A7D;">  </span><span style="color:#C98A7D99;">\`</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">expect</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">test</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">snapshot</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">bar</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#998418;">foo</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">bar</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">    },</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#999999;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// in Jest</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">bar</span><span style="color:#999999;">).</span><span style="color:#59873A;">toMatchInlineSnapshot</span><span style="color:#999999;">(</span><span style="color:#B5695999;">\`</span></span>
<span class="line"><span style="color:#B56959;">    Array [</span></span>
<span class="line"><span style="color:#B56959;">      Object {</span></span>
<span class="line"><span style="color:#B56959;">        &quot;foo&quot;: &quot;bar&quot;,</span></span>
<span class="line"><span style="color:#B56959;">      },</span></span>
<span class="line"><span style="color:#B56959;">    ]</span></span>
<span class="line"><span style="color:#B56959;">  </span><span style="color:#B5695999;">\`</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// in Vitest</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">bar</span><span style="color:#999999;">).</span><span style="color:#59873A;">toMatchInlineSnapshot</span><span style="color:#999999;">(</span><span style="color:#B5695999;">\`</span></span>
<span class="line"><span style="color:#B56959;">    [</span></span>
<span class="line"><span style="color:#B56959;">      {</span></span>
<span class="line"><span style="color:#B56959;">        &quot;foo&quot;: &quot;bar&quot;,</span></span>
<span class="line"><span style="color:#B56959;">      },</span></span>
<span class="line"><span style="color:#B56959;">    ]</span></span>
<span class="line"><span style="color:#B56959;">  </span><span style="color:#B5695999;">\`</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>We believe this is a more reasonable default for readability and overall DX. If you still prefer Jest&#39;s behavior, you can change your config:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// vitest.config.js</span></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">defineConfig</span><span style="color:#666666;">({</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">test</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">snapshotFormat</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#B8A965;">printBasicPrototype</span><span style="color:#666666;">: </span><span style="color:#4D9375;">true</span></span>
<span class="line"><span style="color:#666666;">    }</span></span>
<span class="line"><span style="color:#666666;">  }</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// vitest.config.js</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#59873A;">defineConfig</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">test</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">snapshotFormat</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#998418;">printBasicPrototype</span><span style="color:#999999;">: </span><span style="color:#1E754F;">true</span></span>
<span class="line"><span style="color:#999999;">    }</span></span>
<span class="line"><span style="color:#999999;">  }</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><h4 id="_3-chevron-is-used-as-a-separator-instead-of-colon-for-custom-messages" tabindex="-1">3. Chevron <code>&gt;</code> is used as a separator instead of colon <code>:</code> for custom messages <a class="header-anchor" href="#_3-chevron-is-used-as-a-separator-instead-of-colon-for-custom-messages" aria-label="Permalink to &quot;3. Chevron \`&gt;\` is used as a separator instead of colon \`:\` for custom messages&quot;">​</a></h4><p>Vitest uses chevron <code>&gt;</code> as a separator instead of colon <code>:</code> for readability, when a custom message is passed during creation of a snapshot file.</p><p>For the following example test code:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">toThrowErrorMatchingSnapshot</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#4D9375;">throw</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">Error</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">error</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">}).</span><span style="color:#80A665;">toThrowErrorMatchingSnapshot</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">hint</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">toThrowErrorMatchingSnapshot</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">throw</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Error</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">error</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}).</span><span style="color:#59873A;">toThrowErrorMatchingSnapshot</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">hint</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p>In Jest, the snapshot will be:</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">exports[</span><span style="color:#666666;">\`</span><span style="color:#80A665;">toThrowErrorMatchingSnapshot:</span><span style="color:#C98A7D;"> hint </span><span style="color:#4C9A91;">1</span><span style="color:#666666;">\`</span><span style="color:#DBD7CAEE;">] = \`&quot;error&quot;\`;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">exports[</span><span style="color:#999999;">\`</span><span style="color:#59873A;">toThrowErrorMatchingSnapshot:</span><span style="color:#B56959;"> hint </span><span style="color:#2F798A;">1</span><span style="color:#999999;">\`</span><span style="color:#393A34;">] = \`&quot;error&quot;\`;</span></span></code></pre></div><p>In Vitest, the equivalent snapshot will be:</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">exports[</span><span style="color:#666666;">\`</span><span style="color:#80A665;">toThrowErrorMatchingSnapshot</span><span style="color:#C98A7D;"> </span><span style="color:#CB7676;">&gt;</span><span style="color:#C98A7D;"> hint </span><span style="color:#4C9A91;">1</span><span style="color:#666666;">\`</span><span style="color:#DBD7CAEE;">] = \`&quot;error&quot;\`;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">exports[</span><span style="color:#999999;">\`</span><span style="color:#59873A;">toThrowErrorMatchingSnapshot</span><span style="color:#B56959;"> </span><span style="color:#AB5959;">&gt;</span><span style="color:#B56959;"> hint </span><span style="color:#2F798A;">1</span><span style="color:#999999;">\`</span><span style="color:#393A34;">] = \`&quot;error&quot;\`;</span></span></code></pre></div>`,58);function A(d,D,B,u,C,g){const n=p;return l(),e("div",null,[i,t(n,{href:"https://vueschool.io/lessons/snapshots-in-vitest?friend=vueuse"},{default:c(()=>[a("Learn Snapshot by video from Vue School")]),_:1}),h])}const m=o(y,[["render",A]]);export{E as __pageData,m as default};
