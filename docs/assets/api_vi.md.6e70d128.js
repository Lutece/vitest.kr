import{_ as s,j as n,k as a,V as l}from"./chunks/framework.8939a477.js";const B=JSON.parse('{"title":"Vi","description":"","frontmatter":{},"headers":[],"relativePath":"api/vi.md","filePath":"api/vi.md","lastUpdated":1690470465000}'),o={name:"api/vi.md"},p=l(`<h1 id="vi" tabindex="-1">Vi <a class="header-anchor" href="#vi" aria-label="Permalink to &quot;Vi&quot;">​</a></h1><p>Vitest provides utility functions to help you out through its <code>vi</code> helper. You can access it globally (when <a href="/vitest.kr/config/#globals">globals configuration</a> is <strong>enabled</strong>), or import from <code>vitest</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vi</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vi</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span></code></pre></div><h2 id="vi-advancetimersbytime" tabindex="-1">vi.advanceTimersByTime <a class="header-anchor" href="#vi-advancetimersbytime" aria-label="Permalink to &quot;vi.advanceTimersByTime&quot;">​</a></h2><ul><li><p><strong>Type:</strong> <code>(ms: number) =&gt; Vitest</code></p><p>Works just like <code>runAllTimers</code>, but will end after passed milliseconds. For example this will log <code>1, 2, 3</code> and will not throw:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">i</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">0</span></span>
<span class="line"><span style="color:#80A665;">setInterval</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#CB7676;">++</span><span style="color:#BD976A;">i</span><span style="color:#666666;">),</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">50</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">advanceTimersByTime</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">150</span><span style="color:#666666;">)</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">i</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">0</span></span>
<span class="line"><span style="color:#59873A;">setInterval</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#AB5959;">++</span><span style="color:#B07D48;">i</span><span style="color:#999999;">),</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">50</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">advanceTimersByTime</span><span style="color:#999999;">(</span><span style="color:#2F798A;">150</span><span style="color:#999999;">)</span></span></code></pre></div></li></ul><h3 id="vi-advancetimersbytimeasync" tabindex="-1">vi.advanceTimersByTimeAsync <a class="header-anchor" href="#vi-advancetimersbytimeasync" aria-label="Permalink to &quot;vi.advanceTimersByTimeAsync&quot;">​</a></h3><ul><li><p><strong>Type:</strong> <code>(ms: number) =&gt; Promise&lt;Vitest&gt;</code></p><p>Works just like <code>runAllTimersAsync</code>, but will end after passed milliseconds. This will include asynchronously set timers. For example this will log <code>1, 2, 3</code> and will not throw:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">i</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">0</span></span>
<span class="line"><span style="color:#80A665;">setInterval</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#B8A965;">Promise</span><span style="color:#666666;">.</span><span style="color:#80A665;">resolve</span><span style="color:#666666;">().</span><span style="color:#80A665;">then</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#CB7676;">++</span><span style="color:#BD976A;">i</span><span style="color:#666666;">)),</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">50</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">await</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">advanceTimersByTimeAsync</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">150</span><span style="color:#666666;">)</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">i</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">0</span></span>
<span class="line"><span style="color:#59873A;">setInterval</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#998418;">Promise</span><span style="color:#999999;">.</span><span style="color:#59873A;">resolve</span><span style="color:#999999;">().</span><span style="color:#59873A;">then</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#AB5959;">++</span><span style="color:#B07D48;">i</span><span style="color:#999999;">)),</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">50</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">await</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">advanceTimersByTimeAsync</span><span style="color:#999999;">(</span><span style="color:#2F798A;">150</span><span style="color:#999999;">)</span></span></code></pre></div></li></ul><h2 id="vi-advancetimerstonexttimer" tabindex="-1">vi.advanceTimersToNextTimer <a class="header-anchor" href="#vi-advancetimerstonexttimer" aria-label="Permalink to &quot;vi.advanceTimersToNextTimer&quot;">​</a></h2><ul><li><p><strong>Type:</strong> <code>() =&gt; Vitest</code></p><p>Will call next available timer. Useful to make assertions between each timer call. You can chain call it to manage timers by yourself.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">i</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">0</span></span>
<span class="line"><span style="color:#80A665;">setInterval</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#CB7676;">++</span><span style="color:#BD976A;">i</span><span style="color:#666666;">),</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">50</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">advanceTimersToNextTimer</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// log 1</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">.</span><span style="color:#80A665;">advanceTimersToNextTimer</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// log 2</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">.</span><span style="color:#80A665;">advanceTimersToNextTimer</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// log 3</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">i</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">0</span></span>
<span class="line"><span style="color:#59873A;">setInterval</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#AB5959;">++</span><span style="color:#B07D48;">i</span><span style="color:#999999;">),</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">50</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">advanceTimersToNextTimer</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// log 1</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">.</span><span style="color:#59873A;">advanceTimersToNextTimer</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// log 2</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">.</span><span style="color:#59873A;">advanceTimersToNextTimer</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// log 3</span></span></code></pre></div></li></ul><h3 id="vi-advancetimerstonexttimerasync" tabindex="-1">vi.advanceTimersToNextTimerAsync <a class="header-anchor" href="#vi-advancetimerstonexttimerasync" aria-label="Permalink to &quot;vi.advanceTimersToNextTimerAsync&quot;">​</a></h3><ul><li><p><strong>Type:</strong> <code>() =&gt; Promise&lt;Vitest&gt;</code></p><p>Will call next available timer even if it was set asynchronously. Useful to make assertions between each timer call. You can chain call it to manage timers by yourself.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">i</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">0</span></span>
<span class="line"><span style="color:#80A665;">setInterval</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#B8A965;">Promise</span><span style="color:#666666;">.</span><span style="color:#80A665;">resolve</span><span style="color:#666666;">().</span><span style="color:#80A665;">then</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#CB7676;">++</span><span style="color:#BD976A;">i</span><span style="color:#666666;">)),</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">50</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">advanceTimersToNextTimerAsync</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// log 1</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">.</span><span style="color:#80A665;">advanceTimersToNextTimerAsync</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// log 2</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">.</span><span style="color:#80A665;">advanceTimersToNextTimerAsync</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// log 3</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">i</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">0</span></span>
<span class="line"><span style="color:#59873A;">setInterval</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#998418;">Promise</span><span style="color:#999999;">.</span><span style="color:#59873A;">resolve</span><span style="color:#999999;">().</span><span style="color:#59873A;">then</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#AB5959;">++</span><span style="color:#B07D48;">i</span><span style="color:#999999;">)),</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">50</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">advanceTimersToNextTimerAsync</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// log 1</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">.</span><span style="color:#59873A;">advanceTimersToNextTimerAsync</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// log 2</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">.</span><span style="color:#59873A;">advanceTimersToNextTimerAsync</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// log 3</span></span></code></pre></div></li></ul><h2 id="vi-gettimercount" tabindex="-1">vi.getTimerCount <a class="header-anchor" href="#vi-gettimercount" aria-label="Permalink to &quot;vi.getTimerCount&quot;">​</a></h2><ul><li><p><strong>Type:</strong> <code>() =&gt; number</code></p><p>Get the number of waiting timers.</p></li></ul><h2 id="vi-clearallmocks" tabindex="-1">vi.clearAllMocks <a class="header-anchor" href="#vi-clearallmocks" aria-label="Permalink to &quot;vi.clearAllMocks&quot;">​</a></h2><p>Will call <a href="/vitest.kr/api/mock.html#mockclear"><code>.mockClear()</code></a> on all spies. This will clear mock history, but not reset its implementation to the default one.</p><h2 id="vi-clearalltimers" tabindex="-1">vi.clearAllTimers <a class="header-anchor" href="#vi-clearalltimers" aria-label="Permalink to &quot;vi.clearAllTimers&quot;">​</a></h2><p>Removes all timers that are scheduled to run. These timers will never run in the future.</p><h2 id="vi-dynamicimportsettled" tabindex="-1">vi.dynamicImportSettled <a class="header-anchor" href="#vi-dynamicimportsettled" aria-label="Permalink to &quot;vi.dynamicImportSettled&quot;">​</a></h2><p>Wait for all imports to load. Useful, if you have a synchronous call that starts importing a module, that you cannot wait otherwise.</p><h2 id="vi-fn" tabindex="-1">vi.fn <a class="header-anchor" href="#vi-fn" aria-label="Permalink to &quot;vi.fn&quot;">​</a></h2><ul><li><p><strong>Type:</strong> <code>(fn?: Function) =&gt; CallableMockInstance</code></p><p>Creates a spy on a function, though can be initiated without one. Every time a function is invoked, it stores its call arguments, returns, and instances. Also, you can manipulate its behavior with <a href="/vitest.kr/api/mock.html">methods</a>. If no function is given, mock will return <code>undefined</code>, when invoked.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">getApples</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">fn</span><span style="color:#666666;">(()</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">0</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">getApples</span><span style="color:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">getApples</span><span style="color:#666666;">).</span><span style="color:#80A665;">toHaveBeenCalled</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">getApples</span><span style="color:#666666;">).</span><span style="color:#80A665;">toHaveReturnedWith</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">0</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">getApples</span><span style="color:#666666;">.</span><span style="color:#80A665;">mockReturnValueOnce</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">5</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">res</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#80A665;">getApples</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">res</span><span style="color:#666666;">).</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">5</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">getApples</span><span style="color:#666666;">).</span><span style="color:#80A665;">toHaveNthReturnedWith</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">2</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">5</span><span style="color:#666666;">)</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">getApples</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">fn</span><span style="color:#999999;">(()</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">getApples</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">getApples</span><span style="color:#999999;">).</span><span style="color:#59873A;">toHaveBeenCalled</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">getApples</span><span style="color:#999999;">).</span><span style="color:#59873A;">toHaveReturnedWith</span><span style="color:#999999;">(</span><span style="color:#2F798A;">0</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">getApples</span><span style="color:#999999;">.</span><span style="color:#59873A;">mockReturnValueOnce</span><span style="color:#999999;">(</span><span style="color:#2F798A;">5</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">res</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">getApples</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#999999;">).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#2F798A;">5</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">getApples</span><span style="color:#999999;">).</span><span style="color:#59873A;">toHaveNthReturnedWith</span><span style="color:#999999;">(</span><span style="color:#2F798A;">2</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">5</span><span style="color:#999999;">)</span></span></code></pre></div></li></ul><h2 id="vi-getmockedsystemtime" tabindex="-1">vi.getMockedSystemTime <a class="header-anchor" href="#vi-getmockedsystemtime" aria-label="Permalink to &quot;vi.getMockedSystemTime&quot;">​</a></h2><ul><li><p><strong>Type</strong>: <code>() =&gt; Date | null</code></p><p>Returns mocked current date that was set using <code>setSystemTime</code>. If date is not mocked, will return <code>null</code>.</p></li></ul><h2 id="vi-getrealsystemtime" tabindex="-1">vi.getRealSystemTime <a class="header-anchor" href="#vi-getrealsystemtime" aria-label="Permalink to &quot;vi.getRealSystemTime&quot;">​</a></h2><ul><li><p><strong>Type</strong>: <code>() =&gt; number</code></p><p>When using <code>vi.useFakeTimers</code>, <code>Date.now</code> calls are mocked. If you need to get real time in milliseconds, you can call this function.</p></li></ul><h2 id="vi-hoisted" tabindex="-1">vi.hoisted <a class="header-anchor" href="#vi-hoisted" aria-label="Permalink to &quot;vi.hoisted&quot;">​</a></h2><ul><li><p><strong>Type</strong>: <code>&lt;T&gt;(factory: () =&gt; T) =&gt; T</code></p></li><li><p><strong>Version</strong>: Since Vitest 0.31.0</p><p>All static <code>import</code> statements in ES modules are hoisted to top of the file, so any code that is define before the imports will actually be executed after imports are evaluated.</p><p>Hovewer it can be useful to invoke some side effect like mocking dates before importing a module.</p><p>To bypass this limitation, you can rewrite static imports into dynamic ones like this:</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#DBD7CAEE;">callFunctionWithSideEffect()</span></span>
<span class="line"><span style="color:#FDAEB7;">- import { value } from &#39;./some/module.ts&#39;</span></span>
<span class="line"><span style="color:#85E89D;">+ const { value } = await import(&#39;./some/module.ts&#39;)</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#393A34;">callFunctionWithSideEffect()</span></span>
<span class="line"><span style="color:#B31D28;">- import { value } from &#39;./some/module.ts&#39;</span></span>
<span class="line"><span style="color:#22863A;">+ const { value } = await import(&#39;./some/module.ts&#39;)</span></span></code></pre></div><p>When running <code>vitest</code>, you can do this automatically by using <code>vi.hoisted</code> method.</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">- callFunctionWithSideEffect()</span></span>
<span class="line"><span style="color:#DBD7CAEE;">import { value } from &#39;./some/module.ts&#39;</span></span>
<span class="line"><span style="color:#85E89D;">+ vi.hoisted(() =&gt; callFunctionWithSideEffect())</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">- callFunctionWithSideEffect()</span></span>
<span class="line"><span style="color:#393A34;">import { value } from &#39;./some/module.ts&#39;</span></span>
<span class="line"><span style="color:#22863A;">+ vi.hoisted(() =&gt; callFunctionWithSideEffect())</span></span></code></pre></div><p>This method returns the value that was returned from the factory. You can use that value in your <code>vi.mock</code> factories if you need an easy access to locally defined variables:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">expect</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vi</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">originalMethod</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./path/to/module.js</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">const </span><span style="color:#666666;">{</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">mockedMethod</span><span style="color:#CB7676;"> </span><span style="color:#666666;">}</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">hoisted</span><span style="color:#666666;">(()</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#CB7676;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#CB7676;">  </span><span style="color:#4D9375;">return</span><span style="color:#CB7676;"> </span><span style="color:#666666;">{ </span><span style="color:#B8A965;">mockedMethod</span><span style="color:#666666;">: </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">fn</span><span style="color:#666666;">() }</span></span>
<span class="line"><span style="color:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">mock</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./path/to/module.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{ </span><span style="color:#B8A965;">originalMethod</span><span style="color:#666666;">: </span><span style="color:#BD976A;">mockedMethod</span><span style="color:#666666;"> }</span></span>
<span class="line"><span style="color:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">mockedMethod</span><span style="color:#666666;">.</span><span style="color:#80A665;">mockReturnValue</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">100</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#80A665;">originalMethod</span><span style="color:#666666;">()).</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">100</span><span style="color:#666666;">)</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">expect</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vi</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">originalMethod</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./path/to/module.js</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#999999;">{</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">mockedMethod</span><span style="color:#AB5959;"> </span><span style="color:#999999;">}</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">hoisted</span><span style="color:#999999;">(()</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#1E754F;">return</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{ </span><span style="color:#998418;">mockedMethod</span><span style="color:#999999;">: </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">fn</span><span style="color:#999999;">() }</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">mock</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./path/to/module.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#999999;">{ </span><span style="color:#998418;">originalMethod</span><span style="color:#999999;">: </span><span style="color:#B07D48;">mockedMethod</span><span style="color:#999999;"> }</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">mockedMethod</span><span style="color:#999999;">.</span><span style="color:#59873A;">mockReturnValue</span><span style="color:#999999;">(</span><span style="color:#2F798A;">100</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#59873A;">originalMethod</span><span style="color:#999999;">()).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#2F798A;">100</span><span style="color:#999999;">)</span></span></code></pre></div></li></ul><h2 id="vi-mock" tabindex="-1">vi.mock <a class="header-anchor" href="#vi-mock" aria-label="Permalink to &quot;vi.mock&quot;">​</a></h2><ul><li><p><strong>Type</strong>: <code>(path: string, factory?: () =&gt; unknown) =&gt; void</code></p><p>Substitutes all imported modules from provided <code>path</code> with another module. You can use configured Vite aliases inside a path. The call to <code>vi.mock</code> is hoisted, so it doesn&#39;t matter where you call it. It will always be executed before all imports. If you need to reference some variables outside of its scope, you can defined them inside <a href="/vitest.kr/api/vi.html#vi-hoisted"><code>vi.hoisted</code></a> and reference inside <code>vi.mock</code>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>vi.mock</code> works only for modules that were imported with the <code>import</code> keyword. It doesn&#39;t work with <code>require</code>.</p><p>Vitest statically analyzes your files to hoist <code>vi.mock</code>. It means that you cannot use <code>vi</code> that was not imported directly from <code>vitest</code> package (for example, from some utility file). To fix this, always use <code>vi.mock</code> with <code>vi</code> imported from <code>vitest</code>, or enable <a href="/vitest.kr/config/#globals"><code>globals</code></a> config option.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Mocking modules is not currently supported in the <a href="/vitest.kr/guide/browser.html">browser mode</a>. You can track this feature in the GitHub <a href="https://github.com/vitest-dev/vitest/issues/3046">issue</a>.</p></div><p>If <code>factory</code> is defined, all imports will return its result. Vitest calls factory only once and caches result for all subsequent imports until <a href="#vi-unmock"><code>vi.unmock</code></a> or <a href="#vi-dounmock"><code>vi.doUnmock</code></a> is called.</p><p>Unlike in <code>jest</code>, the factory can be asynchronous, so you can use <a href="#vi-importactual"><code>vi.importActual</code></a> or a helper, received as the first argument, inside to get the original module.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">mock</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./path/to/module.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">async</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#BD976A;">importOriginal</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">mod</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#4D9375;">await</span><span style="color:#CB7676;"> </span><span style="color:#80A665;">importOriginal</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">    ...</span><span style="color:#BD976A;">mod</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#758575DD;">// replace some exports</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">namedExport</span><span style="color:#666666;">: </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">fn</span><span style="color:#666666;">(),</span></span>
<span class="line"><span style="color:#666666;">  }</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">mock</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./path/to/module.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">async</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">importOriginal</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">mod</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">await</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">importOriginal</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    ...</span><span style="color:#B07D48;">mod</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// replace some exports</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">namedExport</span><span style="color:#999999;">: </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">fn</span><span style="color:#999999;">(),</span></span>
<span class="line"><span style="color:#999999;">  }</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>vi.mock</code> is hoisted (in other words, <em>moved</em>) to <strong>top of the file</strong>. It means that whenever you write it (be it inside <code>beforeEach</code> or <code>test</code>), it will actually be called before that.</p><p>This also means that you cannot use any variables inside the factory that are defined outside the factory.</p><p>If you need to use variables inside the factory, try <a href="#vi-domock"><code>vi.doMock</code></a>. It works the same way but isn&#39;t hoisted. Beware that it only mocks subsequent imports.</p><p>You can also reference variables defined by <code>vi.hoisted</code> method if it was declared before <code>vi.mock</code>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">namedExport</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./path/to/module.js</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">mocks</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">hoisted</span><span style="color:#666666;">(()</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#CB7676;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#CB7676;">  </span><span style="color:#4D9375;">return</span><span style="color:#CB7676;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">namedExport</span><span style="color:#666666;">: </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">fn</span><span style="color:#666666;">(),</span></span>
<span class="line"><span style="color:#666666;">  }</span></span>
<span class="line"><span style="color:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">mock</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./path/to/module.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">namedExport</span><span style="color:#666666;">: </span><span style="color:#BD976A;">mocks</span><span style="color:#666666;">.</span><span style="color:#BD976A;">namedExport</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">  }</span></span>
<span class="line"><span style="color:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">mocked</span><span style="color:#666666;">(</span><span style="color:#BD976A;">namedExport</span><span style="color:#666666;">).</span><span style="color:#80A665;">mockReturnValue</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">100</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#80A665;">namedExport</span><span style="color:#666666;">()).</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">100</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">namedExport</span><span style="color:#666666;">).</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#BD976A;">mocks</span><span style="color:#666666;">.</span><span style="color:#BD976A;">namedExport</span><span style="color:#666666;">)</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">namedExport</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./path/to/module.js</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">mocks</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">hoisted</span><span style="color:#999999;">(()</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#1E754F;">return</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">namedExport</span><span style="color:#999999;">: </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">fn</span><span style="color:#999999;">(),</span></span>
<span class="line"><span style="color:#999999;">  }</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">mock</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./path/to/module.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">namedExport</span><span style="color:#999999;">: </span><span style="color:#B07D48;">mocks</span><span style="color:#999999;">.</span><span style="color:#B07D48;">namedExport</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  }</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">mocked</span><span style="color:#999999;">(</span><span style="color:#B07D48;">namedExport</span><span style="color:#999999;">).</span><span style="color:#59873A;">mockReturnValue</span><span style="color:#999999;">(</span><span style="color:#2F798A;">100</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#59873A;">namedExport</span><span style="color:#999999;">()).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#2F798A;">100</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">namedExport</span><span style="color:#999999;">).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#B07D48;">mocks</span><span style="color:#999999;">.</span><span style="color:#B07D48;">namedExport</span><span style="color:#999999;">)</span></span></code></pre></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you are mocking a module with default export, you will need to provide a <code>default</code> key within the returned factory function object. This is an ES modules-specific caveat, therefore <code>jest</code> documentation may differ as <code>jest</code> uses CommonJS modules. For example,</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">mock</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./path/to/module.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">default</span><span style="color:#666666;">: { </span><span style="color:#B8A965;">myDefaultKey</span><span style="color:#666666;">: </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">fn</span><span style="color:#666666;">() },</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">namedExport</span><span style="color:#666666;">: </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">fn</span><span style="color:#666666;">(),</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#758575DD;">// etc...</span></span>
<span class="line"><span style="color:#666666;">  }</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">mock</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./path/to/module.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">default</span><span style="color:#999999;">: { </span><span style="color:#998418;">myDefaultKey</span><span style="color:#999999;">: </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">fn</span><span style="color:#999999;">() },</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">namedExport</span><span style="color:#999999;">: </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">fn</span><span style="color:#999999;">(),</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// etc...</span></span>
<span class="line"><span style="color:#999999;">  }</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div></div><p>If there is a <code>__mocks__</code> folder alongside a file that you are mocking, and the factory is not provided, Vitest will try to find a file with the same name in the <code>__mocks__</code> subfolder and use it as an actual module. If you are mocking a dependency, Vitest will try to find a <code>__mocks__</code> folder in the <a href="/vitest.kr/config/#root">root</a> of the project (default is <code>process.cwd()</code>). You can tell Vitest where the dependencies are located through the <a href="/vitest.kr/config/#deps-moduledirectories">deps.moduleDirectories</a> config option.</p><p>For example, you have this file structure:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#dbd7caee;">- __mocks__</span></span>
<span class="line"><span style="color:#dbd7caee;">  - axios.js</span></span>
<span class="line"><span style="color:#dbd7caee;">- src</span></span>
<span class="line"><span style="color:#dbd7caee;">  __mocks__</span></span>
<span class="line"><span style="color:#dbd7caee;">    - increment.js</span></span>
<span class="line"><span style="color:#dbd7caee;">  - increment.js</span></span>
<span class="line"><span style="color:#dbd7caee;">- tests</span></span>
<span class="line"><span style="color:#dbd7caee;">  - increment.test.js</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#393a34;">- __mocks__</span></span>
<span class="line"><span style="color:#393a34;">  - axios.js</span></span>
<span class="line"><span style="color:#393a34;">- src</span></span>
<span class="line"><span style="color:#393a34;">  __mocks__</span></span>
<span class="line"><span style="color:#393a34;">    - increment.js</span></span>
<span class="line"><span style="color:#393a34;">  - increment.js</span></span>
<span class="line"><span style="color:#393a34;">- tests</span></span>
<span class="line"><span style="color:#393a34;">  - increment.test.js</span></span></code></pre></div><p>If you call <code>vi.mock</code> in a test file without a factory provided, it will find a file in the <code>__mocks__</code> folder to use as a module:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// increment.test.js</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vi</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// axios is a default export from \`__mocks__/axios.js\`</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">axios</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">axios</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// increment is a named export from \`src/__mocks__/increment.js\`</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">increment</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">../increment.js</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">mock</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">axios</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">mock</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">../increment.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">axios</span><span style="color:#666666;">.</span><span style="color:#80A665;">get</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">\`</span><span style="color:#C98A7D;">/apples/</span><span style="color:#666666;">\${</span><span style="color:#80A665;">increment</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">)</span><span style="color:#666666;">}</span><span style="color:#C98A7D99;">\`</span><span style="color:#666666;">)</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// increment.test.js</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vi</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// axios is a default export from \`__mocks__/axios.js\`</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">axios</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">axios</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// increment is a named export from \`src/__mocks__/increment.js\`</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">increment</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">../increment.js</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">mock</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">axios</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">mock</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">../increment.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">axios</span><span style="color:#999999;">.</span><span style="color:#59873A;">get</span><span style="color:#999999;">(</span><span style="color:#B5695999;">\`</span><span style="color:#B56959;">/apples/</span><span style="color:#999999;">\${</span><span style="color:#59873A;">increment</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span><span style="color:#999999;">}</span><span style="color:#B5695999;">\`</span><span style="color:#999999;">)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Beware that if you don&#39;t call <code>vi.mock</code>, modules <strong>are not</strong> mocked automatically. To replicate Jest&#39;s automocking behaviour, you can call <code>vi.mock</code> for each required module inside <a href="/vitest.kr/config/#setupfiles"><code>setupFiles</code></a>.</p></div><p>If there is no <code>__mocks__</code> folder or a factory provided, Vitest will import the original module and auto-mock all its exports. For the rules applied, see <a href="/vitest.kr/guide/mocking.html#automocking-algorithm">algorithm</a>.</p></li></ul><h2 id="vi-domock" tabindex="-1">vi.doMock <a class="header-anchor" href="#vi-domock" aria-label="Permalink to &quot;vi.doMock&quot;">​</a></h2><ul><li><p><strong>Type</strong>: <code>(path: string, factory?: () =&gt; unknown) =&gt; void</code></p><p>The same as <a href="#vi-mock"><code>vi.mock</code></a>, but it&#39;s not hoisted at the top of the file, so you can reference variables in the global file scope. The next import of the module will be mocked. This will not mock modules that were imported before this was called.</p></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// ./increment.js</span></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">increment</span><span style="color:#666666;">(</span><span style="color:#BD976A;">number</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">number</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">+</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">1</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// ./increment.js</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">increment</span><span style="color:#999999;">(</span><span style="color:#B07D48;">number</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">number</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">+</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">1</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">beforeEach</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">test</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">increment</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./increment.js</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// the module is not mocked, because vi.doMock is not called yet</span></span>
<span class="line"><span style="color:#80A665;">increment</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">mockedIncrement</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">beforeEach</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// you can access variables inside a factory</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">doMock</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./increment.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">({ </span><span style="color:#80A665;">increment</span><span style="color:#666666;">: () =&gt; </span><span style="color:#CB7676;">++</span><span style="color:#BD976A;">mockedIncrement</span><span style="color:#666666;"> }))</span></span>
<span class="line"><span style="color:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">importing the next module imports mocked one</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">async</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// original import WAS NOT MOCKED, because vi.doMock is evaluated AFTER imports</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#80A665;">increment</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">)).</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">2</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#666666;">{</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">increment</span><span style="color:#666666;">:</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">mockedIncrement</span><span style="color:#CB7676;"> </span><span style="color:#666666;">}</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#4D9375;">await</span><span style="color:#CB7676;"> import</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./increment.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// new import returns mocked module</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#80A665;">mockedIncrement</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">)).</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">101</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#80A665;">mockedIncrement</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">)).</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">102</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#80A665;">mockedIncrement</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">)).</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">103</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">beforeEach</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">test</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">increment</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./increment.js</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// the module is not mocked, because vi.doMock is not called yet</span></span>
<span class="line"><span style="color:#59873A;">increment</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">mockedIncrement</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">beforeEach</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// you can access variables inside a factory</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">doMock</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./increment.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">({ </span><span style="color:#59873A;">increment</span><span style="color:#999999;">: () =&gt; </span><span style="color:#AB5959;">++</span><span style="color:#B07D48;">mockedIncrement</span><span style="color:#999999;"> }))</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">importing the next module imports mocked one</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">async</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// original import WAS NOT MOCKED, because vi.doMock is evaluated AFTER imports</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#59873A;">increment</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#2F798A;">2</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#999999;">{</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">increment</span><span style="color:#999999;">:</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">mockedIncrement</span><span style="color:#AB5959;"> </span><span style="color:#999999;">}</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">await</span><span style="color:#AB5959;"> import</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./increment.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// new import returns mocked module</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#59873A;">mockedIncrement</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#2F798A;">101</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#59873A;">mockedIncrement</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#2F798A;">102</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#59873A;">mockedIncrement</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#2F798A;">103</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><h2 id="vi-mocked" tabindex="-1">vi.mocked <a class="header-anchor" href="#vi-mocked" aria-label="Permalink to &quot;vi.mocked&quot;">​</a></h2><ul><li><p><strong>Type</strong>: <code>&lt;T&gt;(obj: T, deep?: boolean) =&gt; MaybeMockedDeep&lt;T&gt;</code></p></li><li><p><strong>Type</strong>: <code>&lt;T&gt;(obj: T, options?: { partial?: boolean; deep?: boolean }) =&gt; MaybePartiallyMockedDeep&lt;T&gt;</code></p><p>Type helper for TypeScript. In reality just returns the object that was passed.</p><p>When <code>partial</code> is <code>true</code> it will expect a <code>Partial&lt;T&gt;</code> as a return value.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">example</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./example.js</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">mock</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./example.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">1+1 equals 2</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">async</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">mocked</span><span style="color:#666666;">(</span><span style="color:#BD976A;">example</span><span style="color:#666666;">.</span><span style="color:#BD976A;">calc</span><span style="color:#666666;">).</span><span style="color:#80A665;">mockRestore</span><span style="color:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">res</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">example</span><span style="color:#666666;">.</span><span style="color:#80A665;">calc</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">+</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">1</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">res</span><span style="color:#666666;">).</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">2</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">example</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./example.js</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">mock</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./example.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">1+1 equals 2</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">async</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">mocked</span><span style="color:#999999;">(</span><span style="color:#B07D48;">example</span><span style="color:#999999;">.</span><span style="color:#B07D48;">calc</span><span style="color:#999999;">).</span><span style="color:#59873A;">mockRestore</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">res</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">example</span><span style="color:#999999;">.</span><span style="color:#59873A;">calc</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">+</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#999999;">).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#2F798A;">2</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div></li></ul><h2 id="vi-importactual" tabindex="-1">vi.importActual <a class="header-anchor" href="#vi-importactual" aria-label="Permalink to &quot;vi.importActual&quot;">​</a></h2><ul><li><p><strong>Type</strong>: <code>&lt;T&gt;(path: string) =&gt; Promise&lt;T&gt;</code></p><p>Imports module, bypassing all checks if it should be mocked. Can be useful if you want to mock module partially.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">mock</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./example.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">async</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">axios</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#4D9375;">await</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">importActual</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./example.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{ ...</span><span style="color:#BD976A;">axios</span><span style="color:#666666;">, </span><span style="color:#B8A965;">get</span><span style="color:#666666;">: </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">fn</span><span style="color:#666666;">() }</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">mock</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./example.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">async</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">axios</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">await</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">importActual</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./example.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#999999;">{ ...</span><span style="color:#B07D48;">axios</span><span style="color:#999999;">, </span><span style="color:#998418;">get</span><span style="color:#999999;">: </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">fn</span><span style="color:#999999;">() }</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div></li></ul><h2 id="vi-importmock" tabindex="-1">vi.importMock <a class="header-anchor" href="#vi-importmock" aria-label="Permalink to &quot;vi.importMock&quot;">​</a></h2><ul><li><p><strong>Type</strong>: <code>&lt;T&gt;(path: string) =&gt; Promise&lt;MaybeMockedDeep&lt;T&gt;&gt;</code></p><p>Imports a module with all of its properties (including nested properties) mocked. Follows the same rules that <a href="#vi-mock"><code>vi.mock</code></a> follows. For the rules applied, see <a href="/vitest.kr/guide/mocking.html#automocking-algorithm">algorithm</a>.</p></li></ul><h2 id="vi-resetallmocks" tabindex="-1">vi.resetAllMocks <a class="header-anchor" href="#vi-resetallmocks" aria-label="Permalink to &quot;vi.resetAllMocks&quot;">​</a></h2><p>Will call <a href="/vitest.kr/api/mock.html#mockreset"><code>.mockReset()</code></a> on all spies. This will clear mock history and reset its implementation to an empty function (will return <code>undefined</code>).</p><h2 id="vi-resetconfig" tabindex="-1">vi.resetConfig <a class="header-anchor" href="#vi-resetconfig" aria-label="Permalink to &quot;vi.resetConfig&quot;">​</a></h2><ul><li><p><strong>Type</strong>: <code>RuntimeConfig</code></p><p>If <a href="#vi-setconfig"><code>vi.setConfig</code></a> was called before, this will reset config to the original state.</p></li></ul><h2 id="vi-resetmodules" tabindex="-1">vi.resetModules <a class="header-anchor" href="#vi-resetmodules" aria-label="Permalink to &quot;vi.resetModules&quot;">​</a></h2><ul><li><p><strong>Type</strong>: <code>() =&gt; Vitest</code></p><p>Resets modules registry by clearing cache of all modules. This allows modules to be reevaluated when reimported. Top-level imports cannot be reevaluated. Might be useful to isolate modules where local state conflicts between tests.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vi</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">data</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./data.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// Will not get reevaluated beforeEach test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">beforeEach</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">resetModules</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">change state</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">async</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">mod</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#4D9375;">await</span><span style="color:#CB7676;"> import</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./some/path.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span><span style="color:#CB7676;"> </span><span style="color:#758575DD;">// Will get reevaluated</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">mod</span><span style="color:#666666;">.</span><span style="color:#80A665;">changeLocalState</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">new value</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">mod</span><span style="color:#666666;">.</span><span style="color:#80A665;">getLocalState</span><span style="color:#666666;">()).</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">new value</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">module has old state</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">async</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">mod</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#4D9375;">await</span><span style="color:#CB7676;"> import</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./some/path.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span><span style="color:#CB7676;"> </span><span style="color:#758575DD;">// Will get reevaluated</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">mod</span><span style="color:#666666;">.</span><span style="color:#80A665;">getLocalState</span><span style="color:#666666;">()).</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">old value</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vi</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">data</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./data.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// Will not get reevaluated beforeEach test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">beforeEach</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">resetModules</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">change state</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">async</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">mod</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">await</span><span style="color:#AB5959;"> import</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./some/path.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> </span><span style="color:#A0ADA0;">// Will get reevaluated</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">mod</span><span style="color:#999999;">.</span><span style="color:#59873A;">changeLocalState</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">new value</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">mod</span><span style="color:#999999;">.</span><span style="color:#59873A;">getLocalState</span><span style="color:#999999;">()).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">new value</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">module has old state</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">async</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">mod</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">await</span><span style="color:#AB5959;"> import</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./some/path.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> </span><span style="color:#A0ADA0;">// Will get reevaluated</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">mod</span><span style="color:#999999;">.</span><span style="color:#59873A;">getLocalState</span><span style="color:#999999;">()).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">old value</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Does not reset mocks registry. To clear mocks registry, use <a href="#vi-unmock"><code>vi.unmock</code></a> or <a href="#vi-dounmock"><code>vi.doUnmock</code></a>.</p></div><h2 id="vi-restoreallmocks" tabindex="-1">vi.restoreAllMocks <a class="header-anchor" href="#vi-restoreallmocks" aria-label="Permalink to &quot;vi.restoreAllMocks&quot;">​</a></h2><p>Will call <a href="/vitest.kr/api/mock.html#mockrestore"><code>.mockRestore()</code></a> on all spies. This will clear mock history and reset its implementation to the original one.</p><h2 id="vi-restorecurrentdate" tabindex="-1">vi.restoreCurrentDate <a class="header-anchor" href="#vi-restorecurrentdate" aria-label="Permalink to &quot;vi.restoreCurrentDate&quot;">​</a></h2><ul><li><p><strong>Type:</strong> <code>() =&gt; void</code></p><p>Restores <code>Date</code> back to its native implementation.</p></li></ul><h2 id="vi-stubenv" tabindex="-1">vi.stubEnv <a class="header-anchor" href="#vi-stubenv" aria-label="Permalink to &quot;vi.stubEnv&quot;">​</a></h2><ul><li><p><strong>Type:</strong> <code>(name: string, value: string) =&gt; Vitest</code></p></li><li><p><strong>Version:</strong> Since Vitest 0.26.0</p><p>Changes the value of environmental variable on <code>p<wbr>rocess.env</code> and <code>i<wbr>mport.meta.env</code>. You can restore its value by calling <code>vi.unstubAllEnvs</code>.</p></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vi</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// \`p<wbr>rocess.env.NODE_ENV\` and \`i<wbr>mport.meta.env.NODE_ENV\`</span></span>
<span class="line"><span style="color:#758575DD;">// are &quot;development&quot; before calling &quot;vi.stubEnv&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">stubEnv</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">NODE_ENV</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">production</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">process</span><span style="color:#666666;">.</span><span style="color:#BD976A;">env</span><span style="color:#666666;">.</span><span style="color:#BD976A;">NODE_ENV</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">production</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#666666;">.</span><span style="color:#B8A965;">meta</span><span style="color:#666666;">.</span><span style="color:#BD976A;">env</span><span style="color:#666666;">.</span><span style="color:#BD976A;">NODE_ENV</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">production</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="color:#758575DD;">// doesn&#39;t change other envs</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#666666;">.</span><span style="color:#B8A965;">meta</span><span style="color:#666666;">.</span><span style="color:#BD976A;">env</span><span style="color:#666666;">.</span><span style="color:#BD976A;">MODE</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">development</span><span style="color:#C98A7D99;">&#39;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vi</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// \`p<wbr>rocess.env.NODE_ENV\` and \`i<wbr>mport.meta.env.NODE_ENV\`</span></span>
<span class="line"><span style="color:#A0ADA0;">// are &quot;development&quot; before calling &quot;vi.stubEnv&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">stubEnv</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">NODE_ENV</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">production</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">process</span><span style="color:#999999;">.</span><span style="color:#B07D48;">env</span><span style="color:#999999;">.</span><span style="color:#B07D48;">NODE_ENV</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">production</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#999999;">.</span><span style="color:#998418;">meta</span><span style="color:#999999;">.</span><span style="color:#B07D48;">env</span><span style="color:#999999;">.</span><span style="color:#B07D48;">NODE_ENV</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">production</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#A0ADA0;">// doesn&#39;t change other envs</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#999999;">.</span><span style="color:#998418;">meta</span><span style="color:#999999;">.</span><span style="color:#B07D48;">env</span><span style="color:#999999;">.</span><span style="color:#B07D48;">MODE</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">development</span><span style="color:#B5695999;">&#39;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can also change the value by simply assigning it, but you won&#39;t be able to use <code>vi.unstubAllEnvs</code> to restore previous value:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#666666;">.</span><span style="color:#B8A965;">meta</span><span style="color:#666666;">.</span><span style="color:#BD976A;">env</span><span style="color:#666666;">.</span><span style="color:#BD976A;">MODE</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">test</span><span style="color:#C98A7D99;">&#39;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#999999;">.</span><span style="color:#998418;">meta</span><span style="color:#999999;">.</span><span style="color:#B07D48;">env</span><span style="color:#999999;">.</span><span style="color:#B07D48;">MODE</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">test</span><span style="color:#B5695999;">&#39;</span></span></code></pre></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Vitest transforms all <code>i<wbr>mport.meta.env</code> calls into <code>p<wbr>rocess.env</code>, so they can be easily changed at runtime. Node.js only supports string values as env parameters, while Vite supports several built-in envs as boolean (namely, <code>SSR</code>, <code>DEV</code>, <code>PROD</code>). To mimic Vite, set &quot;truthy&quot; values as env: <code>&#39;&#39;</code> instead of <code>false</code>, and <code>&#39;1&#39;</code> instead of <code>true</code>.</p><p>But beware that you cannot rely on <code>i<wbr>mport.meta.env.DEV === false</code> in this case. Use <code>!i<wbr>mport.meta.env.DEV</code>. This also affects simple assigning, not just <code>vi.stubEnv</code> method.</p></div><h2 id="vi-unstuballenvs" tabindex="-1">vi.unstubAllEnvs <a class="header-anchor" href="#vi-unstuballenvs" aria-label="Permalink to &quot;vi.unstubAllEnvs&quot;">​</a></h2><ul><li><p><strong>Type:</strong> <code>() =&gt; Vitest</code></p></li><li><p><strong>Version:</strong> Since Vitest 0.26.0</p><p>Restores all <code>i<wbr>mport.meta.env</code> and <code>p<wbr>rocess.env</code> values that were changed with <code>vi.stubEnv</code>. When it&#39;s called for the first time, Vitest remembers the original value and will store it, until <code>unstubAllEnvs</code> is called again.</p></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vi</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// \`p<wbr>rocess.env.NODE_ENV\` and \`i<wbr>mport.meta.env.NODE_ENV\`</span></span>
<span class="line"><span style="color:#758575DD;">// are &quot;development&quot; before calling stubEnv</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">stubEnv</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">NODE_ENV</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">production</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">process</span><span style="color:#666666;">.</span><span style="color:#BD976A;">env</span><span style="color:#666666;">.</span><span style="color:#BD976A;">NODE_ENV</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">production</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#666666;">.</span><span style="color:#B8A965;">meta</span><span style="color:#666666;">.</span><span style="color:#BD976A;">env</span><span style="color:#666666;">.</span><span style="color:#BD976A;">NODE_ENV</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">production</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">stubEnv</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">NODE_ENV</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">staging</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">process</span><span style="color:#666666;">.</span><span style="color:#BD976A;">env</span><span style="color:#666666;">.</span><span style="color:#BD976A;">NODE_ENV</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">staging</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#666666;">.</span><span style="color:#B8A965;">meta</span><span style="color:#666666;">.</span><span style="color:#BD976A;">env</span><span style="color:#666666;">.</span><span style="color:#BD976A;">NODE_ENV</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">staging</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">unstubAllEnvs</span><span style="color:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// restores to the value that were stored before the first &quot;stubEnv&quot; call</span></span>
<span class="line"><span style="color:#BD976A;">process</span><span style="color:#666666;">.</span><span style="color:#BD976A;">env</span><span style="color:#666666;">.</span><span style="color:#BD976A;">NODE_ENV</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">development</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#666666;">.</span><span style="color:#B8A965;">meta</span><span style="color:#666666;">.</span><span style="color:#BD976A;">env</span><span style="color:#666666;">.</span><span style="color:#BD976A;">NODE_ENV</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">development</span><span style="color:#C98A7D99;">&#39;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vi</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// \`p<wbr>rocess.env.NODE_ENV\` and \`i<wbr>mport.meta.env.NODE_ENV\`</span></span>
<span class="line"><span style="color:#A0ADA0;">// are &quot;development&quot; before calling stubEnv</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">stubEnv</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">NODE_ENV</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">production</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">process</span><span style="color:#999999;">.</span><span style="color:#B07D48;">env</span><span style="color:#999999;">.</span><span style="color:#B07D48;">NODE_ENV</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">production</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#999999;">.</span><span style="color:#998418;">meta</span><span style="color:#999999;">.</span><span style="color:#B07D48;">env</span><span style="color:#999999;">.</span><span style="color:#B07D48;">NODE_ENV</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">production</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">stubEnv</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">NODE_ENV</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">staging</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">process</span><span style="color:#999999;">.</span><span style="color:#B07D48;">env</span><span style="color:#999999;">.</span><span style="color:#B07D48;">NODE_ENV</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">staging</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#999999;">.</span><span style="color:#998418;">meta</span><span style="color:#999999;">.</span><span style="color:#B07D48;">env</span><span style="color:#999999;">.</span><span style="color:#B07D48;">NODE_ENV</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">staging</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">unstubAllEnvs</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// restores to the value that were stored before the first &quot;stubEnv&quot; call</span></span>
<span class="line"><span style="color:#B07D48;">process</span><span style="color:#999999;">.</span><span style="color:#B07D48;">env</span><span style="color:#999999;">.</span><span style="color:#B07D48;">NODE_ENV</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">development</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#999999;">.</span><span style="color:#998418;">meta</span><span style="color:#999999;">.</span><span style="color:#B07D48;">env</span><span style="color:#999999;">.</span><span style="color:#B07D48;">NODE_ENV</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">development</span><span style="color:#B5695999;">&#39;</span></span></code></pre></div><h2 id="vi-stubglobal" tabindex="-1">vi.stubGlobal <a class="header-anchor" href="#vi-stubglobal" aria-label="Permalink to &quot;vi.stubGlobal&quot;">​</a></h2><ul><li><p><strong>Type:</strong> <code>(name: string | number | symbol, value: unknown) =&gt; Vitest</code></p><p>Changes the value of global variable. You can restore its original value by calling <code>vi.unstubAllGlobals</code>.</p></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vi</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// \`innerWidth\` is &quot;0&quot; before calling stubGlobal</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">stubGlobal</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">innerWidth</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">100</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">innerWidth</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">100</span></span>
<span class="line"><span style="color:#BD976A;">globalThis</span><span style="color:#666666;">.</span><span style="color:#BD976A;">innerWidth</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">100</span></span>
<span class="line"><span style="color:#758575DD;">// if you are using jsdom or happy-dom</span></span>
<span class="line"><span style="color:#BD976A;">window</span><span style="color:#666666;">.</span><span style="color:#BD976A;">innerWidth</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">100</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vi</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// \`innerWidth\` is &quot;0&quot; before calling stubGlobal</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">stubGlobal</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">innerWidth</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">100</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">innerWidth</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">100</span></span>
<span class="line"><span style="color:#B07D48;">globalThis</span><span style="color:#999999;">.</span><span style="color:#B07D48;">innerWidth</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">100</span></span>
<span class="line"><span style="color:#A0ADA0;">// if you are using jsdom or happy-dom</span></span>
<span class="line"><span style="color:#B07D48;">window</span><span style="color:#999999;">.</span><span style="color:#B07D48;">innerWidth</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">100</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can also change the value by simply assigning it to <code>globalThis</code> or <code>window</code> (if you are using <code>jsdom</code> or <code>happy-dom</code> environment), but you won&#39;t be able to use <code>vi.unstubAllGlobals</code> to restore original value:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#BD976A;">globalThis</span><span style="color:#666666;">.</span><span style="color:#BD976A;">innerWidth</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">100</span></span>
<span class="line"><span style="color:#758575DD;">// if you are using jsdom or happy-dom</span></span>
<span class="line"><span style="color:#BD976A;">window</span><span style="color:#666666;">.</span><span style="color:#BD976A;">innerWidth</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">100</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">globalThis</span><span style="color:#999999;">.</span><span style="color:#B07D48;">innerWidth</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">100</span></span>
<span class="line"><span style="color:#A0ADA0;">// if you are using jsdom or happy-dom</span></span>
<span class="line"><span style="color:#B07D48;">window</span><span style="color:#999999;">.</span><span style="color:#B07D48;">innerWidth</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">100</span></span></code></pre></div></div><h2 id="vi-unstuballglobals" tabindex="-1">vi.unstubAllGlobals <a class="header-anchor" href="#vi-unstuballglobals" aria-label="Permalink to &quot;vi.unstubAllGlobals&quot;">​</a></h2><ul><li><p><strong>Type:</strong> <code>() =&gt; Vitest</code></p></li><li><p><strong>Version:</strong> Since Vitest 0.26.0</p><p>Restores all global values on <code>globalThis</code>/<code>global</code> (and <code>window</code>/<code>top</code>/<code>self</code>/<code>parent</code>, if you are using <code>jsdom</code> or <code>happy-dom</code> environment) that were changed with <code>vi.stubGlobal</code>. When it&#39;s called for the first time, Vitest remembers the original value and will store it, until <code>unstubAllGlobals</code> is called again.</p></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vi</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">Mock</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">fn</span><span style="color:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// IntersectionObserver is &quot;undefined&quot; before calling &quot;stubGlobal&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">stubGlobal</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">IntersectionObserver</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">Mock</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">IntersectionObserver</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">Mock</span></span>
<span class="line"><span style="color:#BD976A;">global</span><span style="color:#666666;">.</span><span style="color:#BD976A;">IntersectionObserver</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">Mock</span></span>
<span class="line"><span style="color:#BD976A;">globalThis</span><span style="color:#666666;">.</span><span style="color:#BD976A;">IntersectionObserver</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">Mock</span></span>
<span class="line"><span style="color:#758575DD;">// if you are using jsdom or happy-dom</span></span>
<span class="line"><span style="color:#BD976A;">window</span><span style="color:#666666;">.</span><span style="color:#BD976A;">IntersectionObserver</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">Mock</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">unstubAllGlobals</span><span style="color:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">globalThis</span><span style="color:#666666;">.</span><span style="color:#BD976A;">IntersectionObserver</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">undefined</span></span>
<span class="line"><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">IntersectionObserver</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">in</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">globalThis</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">false</span></span>
<span class="line"><span style="color:#758575DD;">// throws ReferenceError, because it&#39;s not defined</span></span>
<span class="line"><span style="color:#BD976A;">IntersectionObserver</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">undefined</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vi</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">Mock</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">fn</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// IntersectionObserver is &quot;undefined&quot; before calling &quot;stubGlobal&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">stubGlobal</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">IntersectionObserver</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Mock</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">IntersectionObserver</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Mock</span></span>
<span class="line"><span style="color:#B07D48;">global</span><span style="color:#999999;">.</span><span style="color:#B07D48;">IntersectionObserver</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Mock</span></span>
<span class="line"><span style="color:#B07D48;">globalThis</span><span style="color:#999999;">.</span><span style="color:#B07D48;">IntersectionObserver</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Mock</span></span>
<span class="line"><span style="color:#A0ADA0;">// if you are using jsdom or happy-dom</span></span>
<span class="line"><span style="color:#B07D48;">window</span><span style="color:#999999;">.</span><span style="color:#B07D48;">IntersectionObserver</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Mock</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">unstubAllGlobals</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">globalThis</span><span style="color:#999999;">.</span><span style="color:#B07D48;">IntersectionObserver</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">undefined</span></span>
<span class="line"><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">IntersectionObserver</span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">in</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">globalThis</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span></span>
<span class="line"><span style="color:#A0ADA0;">// throws ReferenceError, because it&#39;s not defined</span></span>
<span class="line"><span style="color:#B07D48;">IntersectionObserver</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">undefined</span></span></code></pre></div><h2 id="vi-runallticks" tabindex="-1">vi.runAllTicks <a class="header-anchor" href="#vi-runallticks" aria-label="Permalink to &quot;vi.runAllTicks&quot;">​</a></h2><ul><li><p><strong>Type:</strong> <code>() =&gt; Vitest</code></p><p>Calls every microtask that was queued by <code>process.nextTick</code>. This will also run all microtasks scheduled by themselves.</p></li></ul><h2 id="vi-runalltimers" tabindex="-1">vi.runAllTimers <a class="header-anchor" href="#vi-runalltimers" aria-label="Permalink to &quot;vi.runAllTimers&quot;">​</a></h2><ul><li><p><strong>Type:</strong> <code>() =&gt; Vitest</code></p><p>This method will invoke every initiated timer until the timers queue is empty. It means that every timer called during <code>runAllTimers</code> will be fired. If you have an infinite interval, it will throw after 10 000 tries. For example this will log <code>1, 2, 3</code>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">i</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">0</span></span>
<span class="line"><span style="color:#80A665;">setTimeout</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#CB7676;">++</span><span style="color:#BD976A;">i</span><span style="color:#666666;">))</span></span>
<span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">interval</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#80A665;">setInterval</span><span style="color:#666666;">(()</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#CB7676;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#CB7676;">  </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#CB7676;">++</span><span style="color:#BD976A;">i</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#CB7676;">  </span><span style="color:#4D9375;">if</span><span style="color:#CB7676;"> </span><span style="color:#666666;">(</span><span style="color:#BD976A;">i</span><span style="color:#CB7676;"> === </span><span style="color:#4C9A91;">3</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#CB7676;">    </span><span style="color:#80A665;">clearInterval</span><span style="color:#666666;">(</span><span style="color:#BD976A;">interval</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#666666;">},</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">50</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">runAllTimers</span><span style="color:#666666;">()</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">i</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">0</span></span>
<span class="line"><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#AB5959;">++</span><span style="color:#B07D48;">i</span><span style="color:#999999;">))</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">interval</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">setInterval</span><span style="color:#999999;">(()</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#AB5959;">++</span><span style="color:#B07D48;">i</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#1E754F;">if</span><span style="color:#AB5959;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">i</span><span style="color:#AB5959;"> === </span><span style="color:#2F798A;">3</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#59873A;">clearInterval</span><span style="color:#999999;">(</span><span style="color:#B07D48;">interval</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">},</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">50</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">runAllTimers</span><span style="color:#999999;">()</span></span></code></pre></div></li></ul><h3 id="vi-runalltimersasync" tabindex="-1">vi.runAllTimersAsync <a class="header-anchor" href="#vi-runalltimersasync" aria-label="Permalink to &quot;vi.runAllTimersAsync&quot;">​</a></h3><ul><li><p><strong>Type:</strong> <code>() =&gt; Promise&lt;Vitest&gt;</code></p><p>This method will asynchronously invoke every initiated timer until the timers queue is empty. It means that every timer called during <code>runAllTimersAsync</code> will be fired even asynchronous timers. If you have an infinite interval, it will throw after 10 000 tries. For example this will log <code>result</code>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">setTimeout</span><span style="color:#666666;">(</span><span style="color:#CB7676;">async</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4D9375;">await</span><span style="color:#DBD7CAEE;"> </span><span style="color:#B8A965;">Promise</span><span style="color:#666666;">.</span><span style="color:#80A665;">resolve</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">result</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">))</span></span>
<span class="line"><span style="color:#666666;">},</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">100</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">await</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">runAllTimersAsync</span><span style="color:#666666;">()</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(</span><span style="color:#AB5959;">async</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#1E754F;">await</span><span style="color:#393A34;"> </span><span style="color:#998418;">Promise</span><span style="color:#999999;">.</span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">result</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">))</span></span>
<span class="line"><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">100</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">await</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">runAllTimersAsync</span><span style="color:#999999;">()</span></span></code></pre></div></li></ul><h2 id="vi-runonlypendingtimers" tabindex="-1">vi.runOnlyPendingTimers <a class="header-anchor" href="#vi-runonlypendingtimers" aria-label="Permalink to &quot;vi.runOnlyPendingTimers&quot;">​</a></h2><ul><li><p><strong>Type:</strong> <code>() =&gt; Vitest</code></p><p>This method will call every timer that was initiated after <code>vi.useFakeTimers()</code> call. It will not fire any timer that was initiated during its call. For example this will only log <code>1</code>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">i</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">0</span></span>
<span class="line"><span style="color:#80A665;">setInterval</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#CB7676;">++</span><span style="color:#BD976A;">i</span><span style="color:#666666;">),</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">50</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">runOnlyPendingTimers</span><span style="color:#666666;">()</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">i</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">0</span></span>
<span class="line"><span style="color:#59873A;">setInterval</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#AB5959;">++</span><span style="color:#B07D48;">i</span><span style="color:#999999;">),</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">50</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">runOnlyPendingTimers</span><span style="color:#999999;">()</span></span></code></pre></div></li></ul><h3 id="vi-runonlypendingtimersasync" tabindex="-1">vi.runOnlyPendingTimersAsync <a class="header-anchor" href="#vi-runonlypendingtimersasync" aria-label="Permalink to &quot;vi.runOnlyPendingTimersAsync&quot;">​</a></h3><ul><li><p><strong>Type:</strong> <code>() =&gt; Promise&lt;Vitest&gt;</code></p><p>This method will asynchronously call every timer that was initiated after <code>vi.useFakeTimers()</code> call, even asynchronous ones. It will not fire any timer that was initiated during its call. For example this will log <code>2, 3, 3, 1</code>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">setTimeout</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">},</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">100</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#80A665;">setTimeout</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#B8A965;">Promise</span><span style="color:#666666;">.</span><span style="color:#80A665;">resolve</span><span style="color:#666666;">().</span><span style="color:#80A665;">then</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">2</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#80A665;">setInterval</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">      </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">3</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#666666;">},</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">40</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">})</span></span>
<span class="line"><span style="color:#666666;">},</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">10</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">await</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">runOnlyPendingTimersAsync</span><span style="color:#666666;">()</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">100</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">Promise</span><span style="color:#999999;">.</span><span style="color:#59873A;">resolve</span><span style="color:#999999;">().</span><span style="color:#59873A;">then</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">2</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">setInterval</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">3</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">40</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">10</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">await</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">runOnlyPendingTimersAsync</span><span style="color:#999999;">()</span></span></code></pre></div></li></ul><h2 id="vi-setsystemtime" tabindex="-1">vi.setSystemTime <a class="header-anchor" href="#vi-setsystemtime" aria-label="Permalink to &quot;vi.setSystemTime&quot;">​</a></h2><ul><li><p><strong>Type</strong>: <code>(date: string | number | Date) =&gt; void</code></p><p>Sets current date to the one that was passed. All <code>Date</code> calls will return this date.</p><p>Useful if you need to test anything that depends on the current date - for example <a href="https://github.com/moment/luxon/" target="_blank" rel="noreferrer">luxon</a> calls inside your code.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">date</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> new </span><span style="color:#80A665;">Date</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1998</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">11</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">19</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">useFakeTimers</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">setSystemTime</span><span style="color:#666666;">(</span><span style="color:#BD976A;">date</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">Date</span><span style="color:#666666;">.</span><span style="color:#80A665;">now</span><span style="color:#666666;">()).</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#BD976A;">date</span><span style="color:#666666;">.</span><span style="color:#80A665;">valueOf</span><span style="color:#666666;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">useRealTimers</span><span style="color:#666666;">()</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">date</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> new </span><span style="color:#59873A;">Date</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1998</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">11</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">19</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">useFakeTimers</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">setSystemTime</span><span style="color:#999999;">(</span><span style="color:#B07D48;">date</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Date</span><span style="color:#999999;">.</span><span style="color:#59873A;">now</span><span style="color:#999999;">()).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#B07D48;">date</span><span style="color:#999999;">.</span><span style="color:#59873A;">valueOf</span><span style="color:#999999;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">useRealTimers</span><span style="color:#999999;">()</span></span></code></pre></div></li></ul><h2 id="vi-setconfig" tabindex="-1">vi.setConfig <a class="header-anchor" href="#vi-setconfig" aria-label="Permalink to &quot;vi.setConfig&quot;">​</a></h2><ul><li><p><strong>Type</strong>: <code>RuntimeConfig</code></p><p>Updates config for the current test file. You can only affect values that are used, when executing tests.</p></li></ul><h2 id="vi-spyon" tabindex="-1">vi.spyOn <a class="header-anchor" href="#vi-spyon" aria-label="Permalink to &quot;vi.spyOn&quot;">​</a></h2><ul><li><p><strong>Type:</strong> <code>&lt;T, K extends keyof T&gt;(object: T, method: K, accessType?: &#39;get&#39; | &#39;set&#39;) =&gt; MockInstance</code></p><p>Creates a spy on a method or getter/setter of an object.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">apples</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">0</span></span>
<span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">cart</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#80A665;">getApples</span><span style="color:#666666;">: () =&gt; </span><span style="color:#4C9A91;">13</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">spy</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">spyOn</span><span style="color:#666666;">(</span><span style="color:#BD976A;">cart</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">getApples</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">).</span><span style="color:#80A665;">mockImplementation</span><span style="color:#666666;">(()</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">apples</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#BD976A;">apples</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">cart</span><span style="color:#666666;">.</span><span style="color:#80A665;">getApples</span><span style="color:#666666;">()).</span><span style="color:#80A665;">toBe</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">spy</span><span style="color:#666666;">).</span><span style="color:#80A665;">toHaveBeenCalled</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#80A665;">expect</span><span style="color:#666666;">(</span><span style="color:#BD976A;">spy</span><span style="color:#666666;">).</span><span style="color:#80A665;">toHaveReturnedWith</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">)</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">apples</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">0</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">cart</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">getApples</span><span style="color:#999999;">: () =&gt; </span><span style="color:#2F798A;">13</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">spy</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">spyOn</span><span style="color:#999999;">(</span><span style="color:#B07D48;">cart</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">getApples</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">).</span><span style="color:#59873A;">mockImplementation</span><span style="color:#999999;">(()</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">apples</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#B07D48;">apples</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">cart</span><span style="color:#999999;">.</span><span style="color:#59873A;">getApples</span><span style="color:#999999;">()).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">spy</span><span style="color:#999999;">).</span><span style="color:#59873A;">toHaveBeenCalled</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">spy</span><span style="color:#999999;">).</span><span style="color:#59873A;">toHaveReturnedWith</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span></span></code></pre></div></li></ul><h2 id="vi-stubglobal-1" tabindex="-1">vi.stubGlobal <a class="header-anchor" href="#vi-stubglobal-1" aria-label="Permalink to &quot;vi.stubGlobal&quot;">​</a></h2><ul><li><p><strong>Type</strong>: <code>(key: keyof globalThis &amp; Window, value: any) =&gt; Vitest</code></p><p>Puts a value on global variable. If you are using <code>jsdom</code> or <code>happy-dom</code>, also puts the value on <code>window</code> object.</p><p>Read more in <a href="/vitest.kr/guide/mocking.html#globals">&quot;Mocking Globals&quot; section</a>.</p></li></ul><h2 id="vi-unmock" tabindex="-1">vi.unmock <a class="header-anchor" href="#vi-unmock" aria-label="Permalink to &quot;vi.unmock&quot;">​</a></h2><ul><li><p><strong>Type</strong>: <code>(path: string) =&gt; void</code></p><p>Removes module from the mocked registry. All calls to import will return the original module even if it was mocked before. This call is hoisted (moved) to the top of the file, so it will only unmock modules that were defined in <code>setupFiles</code>, for example.</p></li></ul><h2 id="vi-dounmock" tabindex="-1">vi.doUnmock <a class="header-anchor" href="#vi-dounmock" aria-label="Permalink to &quot;vi.doUnmock&quot;">​</a></h2><ul><li><p><strong>Type</strong>: <code>(path: string) =&gt; void</code></p><p>The same as <a href="#vi-unmock"><code>vi.unmock</code></a>, but is not hoisted to the top of the file. The next import of the module will import the original module instead of the mock. This will not unmock previously imported modules.</p></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// ./increment.js</span></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">increment</span><span style="color:#666666;">(</span><span style="color:#BD976A;">number</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">number</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">+</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">1</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// ./increment.js</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">increment</span><span style="color:#999999;">(</span><span style="color:#B07D48;">number</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">number</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">+</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">1</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">increment</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./increment.js</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// increment is already mocked, because vi.mock is hoisted</span></span>
<span class="line"><span style="color:#80A665;">increment</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// this is hoisted, and factory is called before the import on line 1</span></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">mock</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./increment.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">({ </span><span style="color:#80A665;">increment</span><span style="color:#666666;">: () =&gt; </span><span style="color:#4C9A91;">100</span><span style="color:#666666;"> }))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// all calls are mocked, and \`increment\` always returns 100</span></span>
<span class="line"><span style="color:#80A665;">increment</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">100</span></span>
<span class="line"><span style="color:#80A665;">increment</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">30</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// this is not hoisted, so other import will return unmocked module</span></span>
<span class="line"><span style="color:#BD976A;">vi</span><span style="color:#666666;">.</span><span style="color:#80A665;">doUnmock</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./increment.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// this STILL returns 100, because \`vi.doUnmock\` doesn&#39;t reevaluate a module</span></span>
<span class="line"><span style="color:#80A665;">increment</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">100</span></span>
<span class="line"><span style="color:#80A665;">increment</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">30</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// the next import is unmocked, now \`increment\` is the original function that returns count + 1</span></span>
<span class="line"><span style="color:#CB7676;">const </span><span style="color:#666666;">{</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">increment</span><span style="color:#666666;">:</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">unmockedIncrement</span><span style="color:#CB7676;"> </span><span style="color:#666666;">}</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#4D9375;">await</span><span style="color:#CB7676;"> import</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./increment.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">unmockedIncrement</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">2</span></span>
<span class="line"><span style="color:#80A665;">unmockedIncrement</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">30</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">31</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">increment</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./increment.js</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// increment is already mocked, because vi.mock is hoisted</span></span>
<span class="line"><span style="color:#59873A;">increment</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// this is hoisted, and factory is called before the import on line 1</span></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">mock</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./increment.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">({ </span><span style="color:#59873A;">increment</span><span style="color:#999999;">: () =&gt; </span><span style="color:#2F798A;">100</span><span style="color:#999999;"> }))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// all calls are mocked, and \`increment\` always returns 100</span></span>
<span class="line"><span style="color:#59873A;">increment</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">100</span></span>
<span class="line"><span style="color:#59873A;">increment</span><span style="color:#999999;">(</span><span style="color:#2F798A;">30</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// this is not hoisted, so other import will return unmocked module</span></span>
<span class="line"><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#59873A;">doUnmock</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./increment.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// this STILL returns 100, because \`vi.doUnmock\` doesn&#39;t reevaluate a module</span></span>
<span class="line"><span style="color:#59873A;">increment</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">100</span></span>
<span class="line"><span style="color:#59873A;">increment</span><span style="color:#999999;">(</span><span style="color:#2F798A;">30</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// the next import is unmocked, now \`increment\` is the original function that returns count + 1</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#999999;">{</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">increment</span><span style="color:#999999;">:</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">unmockedIncrement</span><span style="color:#AB5959;"> </span><span style="color:#999999;">}</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">await</span><span style="color:#AB5959;"> import</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./increment.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">unmockedIncrement</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">2</span></span>
<span class="line"><span style="color:#59873A;">unmockedIncrement</span><span style="color:#999999;">(</span><span style="color:#2F798A;">30</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">31</span></span></code></pre></div><h2 id="vi-usefaketimers" tabindex="-1">vi.useFakeTimers <a class="header-anchor" href="#vi-usefaketimers" aria-label="Permalink to &quot;vi.useFakeTimers&quot;">​</a></h2><ul><li><p><strong>Type:</strong> <code>() =&gt; Vitest</code></p><p>To enable mocking timers, you need to call this method. It will wrap all further calls to timers (such as <code>setTimeout</code>, <code>setInterval</code>, <code>clearTimeout</code>, <code>clearInterval</code>, <code>nextTick</code>, <code>setImmediate</code>, <code>clearImmediate</code>, and <code>Date</code>), until <a href="#vi-userealtimers"><code>vi.useRealTimers()</code></a> is called.</p><p>The implementation is based internally on <a href="https://github.com/sinonjs/fake-timers" target="_blank" rel="noreferrer"><code>@sinonjs/fake-timers</code></a>.</p></li></ul><h2 id="vi-userealtimers" tabindex="-1">vi.useRealTimers <a class="header-anchor" href="#vi-userealtimers" aria-label="Permalink to &quot;vi.useRealTimers&quot;">​</a></h2><ul><li><p><strong>Type:</strong> <code>() =&gt; Vitest</code></p><p>When timers are run out, you may call this method to return mocked timers to its original implementations. All timers that were run before will not be restored.</p></li></ul>`,93),e=[p];function t(c,r,y,i,A,d){return n(),a("div",null,e)}const m=s(o,[["render",t]]);export{B as __pageData,m as default};
