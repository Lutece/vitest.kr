import{_ as s,j as e,k as a,V as n}from"./chunks/framework.8939a477.js";const h=JSON.parse('{"title":"Migration Guide | Guide","description":"","frontmatter":{"title":"Migration Guide | Guide"},"headers":[],"relativePath":"guide/migration.md","filePath":"guide/migration.md","lastUpdated":1690470465000}'),o={name:"guide/migration.md"},t=n(`<h1 id="migration-guide" tabindex="-1">Migration Guide <a class="header-anchor" href="#migration-guide" aria-label="Permalink to &quot;Migration Guide&quot;">​</a></h1><h2 id="migrating-from-jest" tabindex="-1">Migrating from Jest <a class="header-anchor" href="#migrating-from-jest" aria-label="Permalink to &quot;Migrating from Jest&quot;">​</a></h2><p>Vitest has been designed with a Jest compatible API, in order to make the migration from Jest as simple as possible. Despite those efforts, you may still run into the following differences:</p><p><strong>Globals as a Default</strong></p><p>Jest has their <a href="https://jestjs.io/docs/api" target="_blank" rel="noreferrer">globals API</a> enabled by default. Vitest does not. You can either enable globals via <a href="/vitest.kr/config/#globals">the <code>globals</code> configuration setting</a> or update your code to use imports from the <code>vitest</code> module instead.</p><p>If you decide to keep globals disabled, be aware that common libraries like <a href="https://testing-library.com/" target="_blank" rel="noreferrer"><code>testing-library</code></a> will not run auto DOM <a href="https://testing-library.com/docs/svelte-testing-library/api/#cleanup" target="_blank" rel="noreferrer">cleanup</a>.</p><p><strong>Module mocks</strong></p><p>When mocking a module in Jest, the factory argument&#39;s return value is the default export. In Vitest, the factory argument has to return an object with each export explicitly defined. For example, the following <code>jest.mock</code> would have to be updated as follows:</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">- jest.mock(&#39;./some-path&#39;, () =&gt; &#39;hello&#39;)</span></span>
<span class="line"><span style="color:#85E89D;">+ vi.mock(&#39;./some-path&#39;, () =&gt; ({</span></span>
<span class="line"><span style="color:#85E89D;">+   default: &#39;hello&#39;,</span></span>
<span class="line"><span style="color:#85E89D;">+ })</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">- jest.mock(&#39;./some-path&#39;, () =&gt; &#39;hello&#39;)</span></span>
<span class="line"><span style="color:#22863A;">+ vi.mock(&#39;./some-path&#39;, () =&gt; ({</span></span>
<span class="line"><span style="color:#22863A;">+   default: &#39;hello&#39;,</span></span>
<span class="line"><span style="color:#22863A;">+ })</span></span></code></pre></div><p>For more details please refer to the <a href="/vitest.kr/api/vi.html#vi-mock"><code>vi.mock</code> api section</a>.</p><p><strong>Auto-Mocking Behaviour</strong></p><p>Unlike Jest, mocked modules in <code>&lt;root&gt;/__mocks__</code> are not loaded unless <code>vi.mock()</code> is called. If you need them to be mocked in every test, like in Jest, you can mock them inside <a href="/vitest.kr/config/#setupfiles"><code>setupFiles</code></a>.</p><p><strong>Importing the original of a mocked package</strong></p><p>If you are only partially mocking a package, you might have previously used Jest&#39;s function <code>requireActual</code>. In Vitest, you should replace these calls with <code>vi.importActual</code>.</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">- const { cloneDeep } = jest.requireActual(&#39;lodash/cloneDeep&#39;)</span></span>
<span class="line"><span style="color:#85E89D;">+ const { cloneDeep } = await vi.importActual(&#39;lodash/cloneDeep&#39;)</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">- const { cloneDeep } = jest.requireActual(&#39;lodash/cloneDeep&#39;)</span></span>
<span class="line"><span style="color:#22863A;">+ const { cloneDeep } = await vi.importActual(&#39;lodash/cloneDeep&#39;)</span></span></code></pre></div><p><strong>Jasmine API</strong></p><p>Jest exports various <a href="https://jasmine.github.io/" target="_blank" rel="noreferrer"><code>jasmine</code></a> globals (such as <code>jasmine.any()</code>). Any such instances will need to be migrated to <a href="/vitest.kr/api/">their Vitest counterparts</a>.</p><p><strong>Envs</strong></p><p>Just like Jest, Vitest sets <code>NODE_ENV</code> to <code>test</code>, if it wasn&#39;t set before. Vitest also has a counterpart for <code>JEST_WORKER_ID</code> called <code>VITEST_POOL_ID</code> (always less than or equal to <code>maxThreads</code>), so if you rely on it, don&#39;t forget to rename it. Vitest also exposes <code>VITEST_WORKER_ID</code> which is a unique ID of a running worker - this number is not affected by <code>maxThreads</code>, and will increase with each created worker.</p><p>If you want to modify the envs, you will use <a href="https://jestjs.io/docs/jest-object#jestreplacepropertyobject-propertykey-value" target="_blank" rel="noreferrer">replaceProperty API</a> in Jest, you can use <a href="https://vitest.dev/api/vi.html#vi-stubenv" target="_blank" rel="noreferrer">vi.stubEnv</a> to do it also in Vitest.</p><p><strong>Done Callback</strong></p><p>From Vitest v0.10.0, the callback style of declaring tests is deprecated. You can rewrite them to use <code>async</code>/<code>await</code> functions, or use Promise to mimic the callback style.</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">- it(&#39;should work&#39;, (done) =&gt; {</span></span>
<span class="line"><span style="color:#85E89D;">+ it(&#39;should work&#39;, () =&gt; new Promise(done =&gt; {</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    // ...</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    done()</span></span>
<span class="line"><span style="color:#FDAEB7;">- })</span></span>
<span class="line"><span style="color:#85E89D;">+ }))</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">- it(&#39;should work&#39;, (done) =&gt; {</span></span>
<span class="line"><span style="color:#22863A;">+ it(&#39;should work&#39;, () =&gt; new Promise(done =&gt; {</span></span>
<span class="line"><span style="color:#393A34;">    // ...</span></span>
<span class="line"><span style="color:#393A34;">    done()</span></span>
<span class="line"><span style="color:#B31D28;">- })</span></span>
<span class="line"><span style="color:#22863A;">+ }))</span></span></code></pre></div><p><strong>Hooks</strong></p><p><code>beforeAll</code>/<code>beforeEach</code> hooks may return <a href="/vitest.kr/api/#setup-and-teardown">teardown function</a> in Vitest. Because of that you may need to rewrite your hooks declarations, if they return something other than <code>undefined</code> or <code>null</code>:</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">- beforeEach(() =&gt; setActivePinia(createTestingPinia()))</span></span>
<span class="line"><span style="color:#85E89D;">+ beforeEach(() =&gt; { setActivePinia(createTestingPinia()) })</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">- beforeEach(() =&gt; setActivePinia(createTestingPinia()))</span></span>
<span class="line"><span style="color:#22863A;">+ beforeEach(() =&gt; { setActivePinia(createTestingPinia()) })</span></span></code></pre></div><p><strong>Types</strong></p><p>Vitest doesn&#39;t expose a lot of types on <code>Vi</code> namespace, it exists mainly for compatibility with matchers, so you might need to import types directly from <code>vitest</code> instead of relying on <code>Vi</code> namespace:</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;">- let fn: jest.Mock&lt;string, [string]&gt;</span></span>
<span class="line"><span style="color:#85E89D;">+ import type { Mock } from &#39;vitest&#39;</span></span>
<span class="line"><span style="color:#85E89D;">+ let fn: Mock&lt;[string], string&gt;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B31D28;">- let fn: jest.Mock&lt;string, [string]&gt;</span></span>
<span class="line"><span style="color:#22863A;">+ import type { Mock } from &#39;vitest&#39;</span></span>
<span class="line"><span style="color:#22863A;">+ let fn: Mock&lt;[string], string&gt;</span></span></code></pre></div><p>Also, Vitest has <code>Args</code> type as a first argument instead of <code>Returns</code>, as you can see in diff.</p><p><strong>Timers</strong></p><p>Vitest doesn&#39;t support Jest&#39;s legacy timers.</p><p><strong>Vue Snapshots</strong></p><p>This is not a Jest-specific feature, but if you previously were using Jest with vue-cli preset, you will need to install <a href="https://github.com/eddyerburgh/jest-serializer-vue" target="_blank" rel="noreferrer"><code>jest-serializer-vue</code></a> package, and use it inside <a href="/vitest.kr/config/#setupfiles">setupFiles</a>:</p><p><code>vite.config.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">defineConfig</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vite</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">defineConfig</span><span style="color:#666666;">({</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#B8A965;">test</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#B8A965;">setupFiles</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./tests/unit/setup.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">]</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineConfig</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vite</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#59873A;">defineConfig</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">test</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">setupFiles</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./tests/unit/setup.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><p><code>tests/unit/setup.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vueSnapshotSerializer</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">jest-serializer-vue</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD976A;">expect</span><span style="color:#666666;">.</span><span style="color:#80A665;">addSnapshotSerializer</span><span style="color:#666666;">(</span><span style="color:#BD976A;">vueSnapshotSerializer</span><span style="color:#666666;">)</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vueSnapshotSerializer</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">jest-serializer-vue</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">expect</span><span style="color:#999999;">.</span><span style="color:#59873A;">addSnapshotSerializer</span><span style="color:#999999;">(</span><span style="color:#B07D48;">vueSnapshotSerializer</span><span style="color:#999999;">)</span></span></code></pre></div><p>Otherwise your snapshots will have a lot of escaped <code>&quot;</code> characters.</p>`,39),l=[t];function p(r,i,c,d,y,g){return e(),a("div",null,l)}const f=s(o,[["render",p]]);export{h as __pageData,f as default};
