import{_ as s,j as n,k as a,V as l}from"./chunks/framework.cf42e605.js";const d=JSON.parse('{"title":"Test Runner","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/runner.md","filePath":"advanced/runner.md","lastUpdated":1682535870000}'),p={name:"advanced/runner.md"},o=l(`<h1 id="test-runner" tabindex="-1">Test Runner <a class="header-anchor" href="#test-runner" aria-label="Permalink to &quot;Test Runner&quot;">â€‹</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This is advanced API. If you are just running tests, you probably don&#39;t need this. It is primarily used by library authors.</p></div><p>You can specify a path to your test runner with the <code>runner</code> option in your configuration file. This file should have a default export with a class implementing these methods:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">interface</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">VitestRunner</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * First thing that&#39;s getting called before actually collecting and running tests.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">onBeforeCollect</span><span style="color:#CB7676;">?</span><span style="color:#666666;">(</span><span style="color:#BD976A;">paths</span><span style="color:#666666;">: </span><span style="color:#5DA994;">string</span><span style="color:#666666;">[]):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">unknown</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * Called after collecting tests and before &quot;onBeforeRun&quot;.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">onCollected</span><span style="color:#CB7676;">?</span><span style="color:#666666;">(</span><span style="color:#BD976A;">files</span><span style="color:#666666;">: </span><span style="color:#5DA994;">File</span><span style="color:#666666;">[]):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">unknown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * Called when test runner should cancel next test runs.</span></span>
<span class="line"><span style="color:#758575DD;">   * Runner should listen for this method and mark tests and suites as skipped in</span></span>
<span class="line"><span style="color:#758575DD;">   * &quot;onBeforeRunSuite&quot; and &quot;onBeforeRunTest&quot; when called.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">onCancel</span><span style="color:#CB7676;">?</span><span style="color:#666666;">(</span><span style="color:#BD976A;">reason</span><span style="color:#666666;">: </span><span style="color:#5DA994;">CancelReason</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">unknown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * Called before running a single test. Doesn&#39;t have &quot;result&quot; yet.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">onBeforeRunTest</span><span style="color:#CB7676;">?</span><span style="color:#666666;">(</span><span style="color:#BD976A;">test</span><span style="color:#666666;">: </span><span style="color:#5DA994;">Test</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">unknown</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * Called before actually running the test function. Already has &quot;result&quot; with &quot;state&quot; and &quot;startTime&quot;.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">onBeforeTryTest</span><span style="color:#CB7676;">?</span><span style="color:#666666;">(</span><span style="color:#BD976A;">test</span><span style="color:#666666;">: </span><span style="color:#5DA994;">Test</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">retryCount</span><span style="color:#666666;">: </span><span style="color:#5DA994;">number</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">unknown</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * Called after result and state are set.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">onAfterRunTest</span><span style="color:#CB7676;">?</span><span style="color:#666666;">(</span><span style="color:#BD976A;">test</span><span style="color:#666666;">: </span><span style="color:#5DA994;">Test</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">unknown</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * Called right after running the test function. Doesn&#39;t have new state yet. Will not be called, if the test function throws.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">onAfterTryTest</span><span style="color:#CB7676;">?</span><span style="color:#666666;">(</span><span style="color:#BD976A;">test</span><span style="color:#666666;">: </span><span style="color:#5DA994;">Test</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">retryCount</span><span style="color:#666666;">: </span><span style="color:#5DA994;">number</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">unknown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * Called before running a single suite. Doesn&#39;t have &quot;result&quot; yet.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">onBeforeRunSuite</span><span style="color:#CB7676;">?</span><span style="color:#666666;">(</span><span style="color:#BD976A;">suite</span><span style="color:#666666;">: </span><span style="color:#5DA994;">Suite</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">unknown</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * Called after running a single suite. Has state and result.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">onAfterRunSuite</span><span style="color:#CB7676;">?</span><span style="color:#666666;">(</span><span style="color:#BD976A;">suite</span><span style="color:#666666;">: </span><span style="color:#5DA994;">Suite</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">unknown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * If defined, will be called instead of usual Vitest suite partition and handling.</span></span>
<span class="line"><span style="color:#758575DD;">   * &quot;before&quot; and &quot;after&quot; hooks will not be ignored.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">runSuite</span><span style="color:#CB7676;">?</span><span style="color:#666666;">(</span><span style="color:#BD976A;">suite</span><span style="color:#666666;">: </span><span style="color:#5DA994;">Suite</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Promise</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">void</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * If defined, will be called instead of usual Vitest handling. Useful, if you have your custom test function.</span></span>
<span class="line"><span style="color:#758575DD;">   * &quot;before&quot; and &quot;after&quot; hooks will not be ignored.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">runTest</span><span style="color:#CB7676;">?</span><span style="color:#666666;">(</span><span style="color:#BD976A;">test</span><span style="color:#666666;">: </span><span style="color:#5DA994;">Test</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Promise</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">void</span><span style="color:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * Called, when a task is updated. The same as &quot;onTaskUpdate&quot; in a reporter, but this is running in the same thread as tests.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">onTaskUpdate</span><span style="color:#CB7676;">?</span><span style="color:#666666;">(</span><span style="color:#BD976A;">task</span><span style="color:#666666;">: [</span><span style="color:#5DA994;">string</span><span style="color:#666666;">, </span><span style="color:#5DA994;">TaskResult</span><span style="color:#666666;"> | </span><span style="color:#CB7676;">undefined</span><span style="color:#666666;">][]):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Promise</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">void</span><span style="color:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * Called before running all tests in collected paths.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">onBeforeRun</span><span style="color:#CB7676;">?</span><span style="color:#666666;">(</span><span style="color:#BD976A;">files</span><span style="color:#666666;">: </span><span style="color:#5DA994;">File</span><span style="color:#666666;">[]):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">unknown</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * Called right after running all tests in collected paths.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">onAfterRun</span><span style="color:#CB7676;">?</span><span style="color:#666666;">(</span><span style="color:#BD976A;">files</span><span style="color:#666666;">: </span><span style="color:#5DA994;">File</span><span style="color:#666666;">[]):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">unknown</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * Called when new context for a test is defined. Useful, if you want to add custom properties to the context.</span></span>
<span class="line"><span style="color:#758575DD;">   * If you only want to define custom context with a runner, consider using &quot;beforeAll&quot; in &quot;setupFiles&quot; instead.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">extendTestContext</span><span style="color:#CB7676;">?</span><span style="color:#666666;">(</span><span style="color:#BD976A;">context</span><span style="color:#666666;">: </span><span style="color:#5DA994;">TestContext</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">TestContext</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * Called, when certain files are imported. Can be called in two situations: when collecting tests and when importing setup files.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">importFile</span><span style="color:#666666;">(</span><span style="color:#BD976A;">filepath</span><span style="color:#666666;">: </span><span style="color:#5DA994;">string</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">source</span><span style="color:#666666;">: </span><span style="color:#5DA994;">VitestRunnerImportSource</span><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">unknown</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;">   * Publicly available configuration.</span></span>
<span class="line"><span style="color:#758575DD;">   */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">config</span><span style="color:#666666;">: </span><span style="color:#5DA994;">VitestRunnerConfig</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">VitestRunner</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * First thing that&#39;s getting called before actually collecting and running tests.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">onBeforeCollect</span><span style="color:#AB5959;">?</span><span style="color:#999999;">(</span><span style="color:#B07D48;">paths</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">[]):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">unknown</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * Called after collecting tests and before &quot;onBeforeRun&quot;.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">onCollected</span><span style="color:#AB5959;">?</span><span style="color:#999999;">(</span><span style="color:#B07D48;">files</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">File</span><span style="color:#999999;">[]):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">unknown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * Called when test runner should cancel next test runs.</span></span>
<span class="line"><span style="color:#A0ADA0;">   * Runner should listen for this method and mark tests and suites as skipped in</span></span>
<span class="line"><span style="color:#A0ADA0;">   * &quot;onBeforeRunSuite&quot; and &quot;onBeforeRunTest&quot; when called.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">onCancel</span><span style="color:#AB5959;">?</span><span style="color:#999999;">(</span><span style="color:#B07D48;">reason</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">CancelReason</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">unknown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * Called before running a single test. Doesn&#39;t have &quot;result&quot; yet.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">onBeforeRunTest</span><span style="color:#AB5959;">?</span><span style="color:#999999;">(</span><span style="color:#B07D48;">test</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Test</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">unknown</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * Called before actually running the test function. Already has &quot;result&quot; with &quot;state&quot; and &quot;startTime&quot;.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">onBeforeTryTest</span><span style="color:#AB5959;">?</span><span style="color:#999999;">(</span><span style="color:#B07D48;">test</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Test</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">retryCount</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">unknown</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * Called after result and state are set.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">onAfterRunTest</span><span style="color:#AB5959;">?</span><span style="color:#999999;">(</span><span style="color:#B07D48;">test</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Test</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">unknown</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * Called right after running the test function. Doesn&#39;t have new state yet. Will not be called, if the test function throws.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">onAfterTryTest</span><span style="color:#AB5959;">?</span><span style="color:#999999;">(</span><span style="color:#B07D48;">test</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Test</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">retryCount</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">unknown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * Called before running a single suite. Doesn&#39;t have &quot;result&quot; yet.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">onBeforeRunSuite</span><span style="color:#AB5959;">?</span><span style="color:#999999;">(</span><span style="color:#B07D48;">suite</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Suite</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">unknown</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * Called after running a single suite. Has state and result.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">onAfterRunSuite</span><span style="color:#AB5959;">?</span><span style="color:#999999;">(</span><span style="color:#B07D48;">suite</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Suite</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">unknown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * If defined, will be called instead of usual Vitest suite partition and handling.</span></span>
<span class="line"><span style="color:#A0ADA0;">   * &quot;before&quot; and &quot;after&quot; hooks will not be ignored.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">runSuite</span><span style="color:#AB5959;">?</span><span style="color:#999999;">(</span><span style="color:#B07D48;">suite</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Suite</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Promise</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">void</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * If defined, will be called instead of usual Vitest handling. Useful, if you have your custom test function.</span></span>
<span class="line"><span style="color:#A0ADA0;">   * &quot;before&quot; and &quot;after&quot; hooks will not be ignored.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">runTest</span><span style="color:#AB5959;">?</span><span style="color:#999999;">(</span><span style="color:#B07D48;">test</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">Test</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Promise</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">void</span><span style="color:#999999;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * Called, when a task is updated. The same as &quot;onTaskUpdate&quot; in a reporter, but this is running in the same thread as tests.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">onTaskUpdate</span><span style="color:#AB5959;">?</span><span style="color:#999999;">(</span><span style="color:#B07D48;">task</span><span style="color:#999999;">: [</span><span style="color:#2E8F82;">string</span><span style="color:#999999;">, </span><span style="color:#2E8F82;">TaskResult</span><span style="color:#999999;"> | </span><span style="color:#AB5959;">undefined</span><span style="color:#999999;">][]):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Promise</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">void</span><span style="color:#999999;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * Called before running all tests in collected paths.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">onBeforeRun</span><span style="color:#AB5959;">?</span><span style="color:#999999;">(</span><span style="color:#B07D48;">files</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">File</span><span style="color:#999999;">[]):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">unknown</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * Called right after running all tests in collected paths.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">onAfterRun</span><span style="color:#AB5959;">?</span><span style="color:#999999;">(</span><span style="color:#B07D48;">files</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">File</span><span style="color:#999999;">[]):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">unknown</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * Called when new context for a test is defined. Useful, if you want to add custom properties to the context.</span></span>
<span class="line"><span style="color:#A0ADA0;">   * If you only want to define custom context with a runner, consider using &quot;beforeAll&quot; in &quot;setupFiles&quot; instead.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">extendTestContext</span><span style="color:#AB5959;">?</span><span style="color:#999999;">(</span><span style="color:#B07D48;">context</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">TestContext</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">TestContext</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * Called, when certain files are imported. Can be called in two situations: when collecting tests and when importing setup files.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">importFile</span><span style="color:#999999;">(</span><span style="color:#B07D48;">filepath</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">source</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">VitestRunnerImportSource</span><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">unknown</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * Publicly available configuration.</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">config</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">VitestRunnerConfig</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>When initiating this class, Vitest passes down Vitest config, - you should expose it as a <code>config</code> property.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Vitest also injects an instance of <code>ViteNodeRunner</code> as <code>__vitest_executor</code> property. You can use it to process files in <code>importFile</code> method (this is default behavior of <code>TestRunner</code> and <code>BenchmarkRunner</code>).</p><p><code>ViteNodeRunner</code> exposes <code>executeId</code> method, which is used to import test files in a Vite-friendly environment. Meaning, it will resolve imports and transform file content at runtime so that Node can understand it.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Snapshot support and some other features depend on the runner. If you don&#39;t want to lose it, you can extend your runner from <code>VitestTestRunner</code> imported from <code>vitest/runners</code>. It also exposes <code>BenchmarkNodeRunner</code>, if you want to extend benchmark functionality.</p></div><h2 id="your-task-function" tabindex="-1">Your task function <a class="header-anchor" href="#your-task-function" aria-label="Permalink to &quot;Your task function&quot;">â€‹</a></h2><p>You can extend Vitest task system with your tasks. A task is an object that is part of a suite. It is automatically added to the current suite with a <code>suite.custom</code> method:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// ./utils/custom.js</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">getCurrentSuite</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">setFn</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest/suite</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">describe</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">beforeAll</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">afterAll</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// this function will be called, when Vitest collects tasks</span></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">myCustomTask</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#BD976A;">name</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">fn</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">task</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">getCurrentSuite</span><span style="color:#666666;">().</span><span style="color:#80A665;">custom</span><span style="color:#666666;">(</span><span style="color:#BD976A;">name</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">task</span><span style="color:#666666;">.</span><span style="color:#BD976A;">meta</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#B8A965;">customPropertyToDifferentiateTask</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">setFn</span><span style="color:#666666;">(</span><span style="color:#BD976A;">task</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">fn</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">||</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{}))</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// ./utils/custom.js</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">getCurrentSuite</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">setFn</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest/suite</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">describe</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">beforeAll</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">afterAll</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// this function will be called, when Vitest collects tasks</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#59873A;">myCustomTask</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">name</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">fn</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">task</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">getCurrentSuite</span><span style="color:#999999;">().</span><span style="color:#59873A;">custom</span><span style="color:#999999;">(</span><span style="color:#B07D48;">name</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">task</span><span style="color:#999999;">.</span><span style="color:#B07D48;">meta</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">customPropertyToDifferentiateTask</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">setFn</span><span style="color:#999999;">(</span><span style="color:#B07D48;">task</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">fn</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">||</span><span style="color:#393A34;"> </span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{}))</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// ./garden/tasks.test.js</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">afterAll</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">beforeAll</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">describe</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">myCustomTask</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">../utils/custom.js</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">gardener</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">./gardener.js</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#80A665;">describe</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">take care of the garden</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">beforeAll</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">gardener</span><span style="color:#666666;">.</span><span style="color:#80A665;">putWorkingClothes</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">myCustomTask</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">weed the grass</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">gardener</span><span style="color:#666666;">.</span><span style="color:#80A665;">weedTheGrass</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">})</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">myCustomTask</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">water flowers</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">gardener</span><span style="color:#666666;">.</span><span style="color:#80A665;">waterFlowers</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">afterAll</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">gardener</span><span style="color:#666666;">.</span><span style="color:#80A665;">goHome</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">})</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// ./garden/tasks.test.js</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">afterAll</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">beforeAll</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">describe</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">myCustomTask</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">../utils/custom.js</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">gardener</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">./gardener.js</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">describe</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">take care of the garden</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">beforeAll</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">gardener</span><span style="color:#999999;">.</span><span style="color:#59873A;">putWorkingClothes</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">myCustomTask</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">weed the grass</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">gardener</span><span style="color:#999999;">.</span><span style="color:#59873A;">weedTheGrass</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">myCustomTask</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">water flowers</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">gardener</span><span style="color:#999999;">.</span><span style="color:#59873A;">waterFlowers</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">afterAll</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">gardener</span><span style="color:#999999;">.</span><span style="color:#59873A;">goHome</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">vitest</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">./garden/tasks.test.js</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">vitest</span><span style="color:#393A34;"> </span><span style="color:#B56959;">./garden/tasks.test.js</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you don&#39;t have a custom runner or didn&#39;t define <code>runTest</code> method, Vitest will try to retrieve a task automatically. If you didn&#39;t add a function with <code>setFn</code>, it will fail.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Custom task system supports hooks and contexts. If you want to support property chaining (like, <code>only</code>, <code>skip</code>, and your custom ones), you can import <code>createChainable</code> from <code>vitest/suite</code> and wrap your function with it. You will need to call <code>custom</code> as <code>custom.call(this)</code>, if you decide to do this.</p></div>`,14),e=[o];function t(c,r,y,i,A,D){return n(),a("div",null,e)}const E=s(p,[["render",t]]);export{d as __pageData,E as default};
