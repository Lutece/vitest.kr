import{_ as e,j as t,k as s,V as o}from"./chunks/framework.cf42e605.js";const v=JSON.parse('{"title":"Command Line Interface | Guide","description":"","frontmatter":{"title":"Command Line Interface | Guide"},"headers":[],"relativePath":"guide/cli.md","filePath":"guide/cli.md","lastUpdated":1689779636000}'),a={name:"guide/cli.md"},n=o('<h1 id="command-line-interface" tabindex="-1">Command Line Interface <a class="header-anchor" href="#command-line-interface" aria-label="Permalink to &quot;Command Line Interface&quot;">​</a></h1><h2 id="commands" tabindex="-1">Commands <a class="header-anchor" href="#commands" aria-label="Permalink to &quot;Commands&quot;">​</a></h2><h3 id="vitest" tabindex="-1"><code>vitest</code> <a class="header-anchor" href="#vitest" aria-label="Permalink to &quot;`vitest`&quot;">​</a></h3><p>Start Vitest in the current directory. Will enter the watch mode in development environment and run mode in CI automatically.</p><p>You can pass an additional argument as the filter of the test files to run. For example:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">vitest</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">foobar</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">vitest</span><span style="color:#393A34;"> </span><span style="color:#B56959;">foobar</span></span></code></pre></div><p>Will run only the test file that contains <code>foobar</code> in their paths. This filter only checks inclusion and doesn&#39;t support regexp or glob patterns (unless your terminal processes it before Vitest receives the filter).</p><h3 id="vitest-run" tabindex="-1"><code>vitest run</code> <a class="header-anchor" href="#vitest-run" aria-label="Permalink to &quot;`vitest run`&quot;">​</a></h3><p>Perform a single run without watch mode.</p><h3 id="vitest-watch" tabindex="-1"><code>vitest watch</code> <a class="header-anchor" href="#vitest-watch" aria-label="Permalink to &quot;`vitest watch`&quot;">​</a></h3><p>Run all test suites but watch for changes and rerun tests when they change. Same as calling <code>vitest</code> without an argument. Will fallback to <code>vitest run</code> in CI.</p><h3 id="vitest-dev" tabindex="-1"><code>vitest dev</code> <a class="header-anchor" href="#vitest-dev" aria-label="Permalink to &quot;`vitest dev`&quot;">​</a></h3><p>Alias to <code>vitest watch</code>.</p><h3 id="vitest-related" tabindex="-1"><code>vitest related</code> <a class="header-anchor" href="#vitest-related" aria-label="Permalink to &quot;`vitest related`&quot;">​</a></h3><p>Run only tests that cover a list of source files. Works with static imports (e.g., <code>import(&#39;./index.ts&#39;)</code> or <code>import index from &#39;./index.ts</code>), but not the dynamic ones (e.g., <code>import(filepath)</code>). All files should be relative to root folder.</p><p>Useful to run with <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noreferrer"><code>lint-staged</code></a> or with your CI setup.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">vitest</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">related</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">/src/index.ts</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">/src/hello-world.js</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">vitest</span><span style="color:#393A34;"> </span><span style="color:#B56959;">related</span><span style="color:#393A34;"> </span><span style="color:#B56959;">/src/index.ts</span><span style="color:#393A34;"> </span><span style="color:#B56959;">/src/hello-world.js</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Don&#39;t forget that Vitest runs with enabled watch mode by default. If you are using tools like <code>lint-staged</code>, you should also pass <code>--run</code> option, so that command can exit normally.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// .lintstagedrc.js</span></span>\n<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>\n<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">*.{js,ts}</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest related --run</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span></span>\n<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// .lintstagedrc.js</span></span>\n<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>\n<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">*.{js,ts}</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest related --run</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>\n<span class="line"><span style="color:#999999;">}</span></span></code></pre></div></div><h3 id="vitest-bench" tabindex="-1"><code>vitest bench</code> <a class="header-anchor" href="#vitest-bench" aria-label="Permalink to &quot;`vitest bench`&quot;">​</a></h3><p>Run only <a href="https://vitest.dev/guide/features.html#benchmarking-experimental" target="_blank" rel="noreferrer">benchmark</a> tests, which compare performance results.</p><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table><thead><tr><th>Options</th><th></th></tr></thead><tbody><tr><td><code>-v, --version</code></td><td>Display version number</td></tr><tr><td><code>-r, --root &lt;path&gt;</code></td><td>Define the project root</td></tr><tr><td><code>-c, --config &lt;path&gt;</code></td><td>Path to config file</td></tr><tr><td><code>-u, --update</code></td><td>Update snapshots</td></tr><tr><td><code>-w, --watch</code></td><td>Smart &amp; instant watch mode</td></tr><tr><td><code>-t, --testNamePattern &lt;pattern&gt;</code></td><td>Run tests with full names matching the pattern</td></tr><tr><td><code>--dir &lt;path&gt;</code></td><td>Base directory to scan for the test files</td></tr><tr><td><code>--ui</code></td><td>Enable UI</td></tr><tr><td><code>--open</code></td><td>Open the UI automatically if enabled (default: <code>true</code>)</td></tr><tr><td><code>--api [api]</code></td><td>Serve API, available options: <code>--api.port &lt;port&gt;</code>, <code>--api.host [host]</code> and <code>--api.strictPort</code></td></tr><tr><td><code>--threads</code></td><td>Enable Threads (default: <code>true</code>)</td></tr><tr><td><code>--silent</code></td><td>Silent console output from tests</td></tr><tr><td><code>--isolate</code></td><td>Isolate environment for each test file (default: <code>true</code>)</td></tr><tr><td><code>--reporter &lt;name&gt;</code></td><td>Select reporter: <code>default</code>, <code>verbose</code>, <code>dot</code>, <code>junit</code>, <code>json</code>, or a path to a custom reporter</td></tr><tr><td><code>--outputFile &lt;filename/-s&gt;</code></td><td>Write test results to a file when the <code>--reporter=json</code> or <code>--reporter=junit</code> option is also specified <br> Via <a href="https://github.com/cacjs/cac#dot-nested-options" target="_blank" rel="noreferrer">cac&#39;s dot notation</a> you can specify individual outputs for multiple reporters</td></tr><tr><td><code>--coverage</code></td><td>Enable coverage report</td></tr><tr><td><code>--run</code></td><td>Do not watch</td></tr><tr><td><code>--mode</code></td><td>Override Vite mode (default: <code>test</code>)</td></tr><tr><td><code>--mode &lt;name&gt;</code></td><td>Override Vite mode (default: <code>test</code>)</td></tr><tr><td><code>--globals</code></td><td>Inject APIs globally</td></tr><tr><td><code>--dom</code></td><td>Mock browser api with happy-dom</td></tr><tr><td><code>--browser [options]</code></td><td>Run tests in <a href="/guide/browser.html">the browser</a> (default: <code>false</code>)</td></tr><tr><td><code>--environment &lt;env&gt;</code></td><td>Runner environment (default: <code>node</code>)</td></tr><tr><td><code>--passWithNoTests</code></td><td>Pass when no tests found</td></tr><tr><td><code>--logHeapUsage</code></td><td>Show the size of heap for each test</td></tr><tr><td><code>--allowOnly</code></td><td>Allow tests and suites that are marked as <code>only</code> (default: false in CI, true otherwise)</td></tr><tr><td><code>--dangerouslyIgnoreUnhandledErrors</code></td><td>Ignore any unhandled errors that occur</td></tr><tr><td><code>--changed [since]</code></td><td>Run tests that are affected by the changed files (default: false). See <a href="#changed">docs</a></td></tr><tr><td><code>--shard &lt;shard&gt;</code></td><td>Execute tests in a specified shard</td></tr><tr><td><code>--sequence</code></td><td>Define in what order to run tests. Use <a href="https://github.com/cacjs/cac#dot-nested-options" target="_blank" rel="noreferrer">cac&#39;s dot notation</a> to specify options (for example, use <code>--sequence.shuffle</code> to run tests in random order or <code>--sequence.shuffle --sequence.seed SEED_ID</code> to run a specific order)</td></tr><tr><td><code>--no-color</code></td><td>Removes colors from the console output</td></tr><tr><td><code>--inspect</code></td><td>Enables Node.js inspector</td></tr><tr><td><code>--inspect-brk</code></td><td>Enables Node.js inspector with break</td></tr><tr><td><code>--bail &lt;number&gt;</code></td><td>Stop test execution when given number of tests have failed</td></tr><tr><td><code>--retry &lt;times&gt;</code></td><td>Retry the test specific number of times if it fails</td></tr><tr><td><code>-h, --help</code></td><td>Display available CLI options</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Vitest supports both camel case and kebab case for CLI arguments. For example, <code>--passWithNoTests</code> and <code>--pass-with-no-tests</code> will both work (<code>--no-color</code> and <code>--inspect-brk</code> are the exceptions).</p><p>Vitest also supports different ways of specifying the value: <code>--reporter dot</code> and <code>--reporter=dot</code> are both valid.</p><p>If option supports an array of values, you need to pass the option multiple times:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#dbd7caee;">vitest --reporter=dot --reporter=default</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#393a34;">vitest --reporter=dot --reporter=default</span></span></code></pre></div><p>Boolean options can be negated with <code>no-</code> prefix. Specifying the value as <code>false</code> also works:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#dbd7caee;">vitest --no-api</span></span>\n<span class="line"><span style="color:#dbd7caee;">vitest --api=false</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#393a34;">vitest --no-api</span></span>\n<span class="line"><span style="color:#393a34;">vitest --api=false</span></span></code></pre></div></div><h3 id="changed" tabindex="-1">changed <a class="header-anchor" href="#changed" aria-label="Permalink to &quot;changed&quot;">​</a></h3><ul><li><p><strong>Type</strong>: <code>boolean | string</code></p></li><li><p><strong>Default</strong>: false</p><p>Run tests only against changed files. If no value is provided, it will run tests against uncommitted changes (including staged and unstaged).</p><p>To run tests against changes made in the last commit, you can use <code>--changed HEAD~1</code>. You can also pass commit hash or branch name.</p><p>If paired with the <code>forceRerunTriggers</code> config option it will run the whole test suite if a match is found.</p></li></ul><h3 id="shard" tabindex="-1">shard <a class="header-anchor" href="#shard" aria-label="Permalink to &quot;shard&quot;">​</a></h3><ul><li><p><strong>Type</strong>: <code>string</code></p></li><li><p><strong>Default</strong>: disabled</p><p>Test suite shard to execute in a format of <code>&lt;index&gt;</code>/<code>&lt;count&gt;</code>, where</p><ul><li><code>count</code> is a positive integer, count of divided parts</li><li><code>index</code> is a positive integer, index of divided part</li></ul><p>This command will divide all tests into <code>count</code> equal parts, and will run only those that happen to be in an <code>index</code> part. For example, to split your tests suite into three parts, use this:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">vitest</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">run</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C99076;">--shard=1/3</span></span>\n<span class="line"><span style="color:#80A665;">vitest</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">run</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C99076;">--shard=2/3</span></span>\n<span class="line"><span style="color:#80A665;">vitest</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">run</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C99076;">--shard=3/3</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">vitest</span><span style="color:#393A34;"> </span><span style="color:#B56959;">run</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">--shard=1/3</span></span>\n<span class="line"><span style="color:#59873A;">vitest</span><span style="color:#393A34;"> </span><span style="color:#B56959;">run</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">--shard=2/3</span></span>\n<span class="line"><span style="color:#59873A;">vitest</span><span style="color:#393A34;"> </span><span style="color:#B56959;">run</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">--shard=3/3</span></span></code></pre></div></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You cannot use this option with <code>--watch</code> enabled (enabled in dev by default).</p></div>',28),d=[n];function l(r,c,p,i,h,u){return t(),s("div",null,d)}const f=e(a,[["render",l]]);export{v as __pageData,f as default};
