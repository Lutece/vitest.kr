import{_ as s,j as e,k as a,V as n}from"./chunks/framework.cf42e605.js";const A=JSON.parse('{"title":"Node API","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/api.md","filePath":"advanced/api.md","lastUpdated":1686070815000}'),t={name:"advanced/api.md"},o=n(`<h1 id="node-api" tabindex="-1">Node API <a class="header-anchor" href="#node-api" aria-label="Permalink to &quot;Node API&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Vitest exposes experimental private API. Breaking changes might not follow semver, please pin Vitest&#39;s version when using it.</p></div><h2 id="startvitest" tabindex="-1">startVitest <a class="header-anchor" href="#startvitest" aria-label="Permalink to &quot;startVitest&quot;">​</a></h2><p>You can start running Vitest tests using its Node API:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">startVitest</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest/node</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vitest</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">await</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">startVitest</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">test</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">await</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vitest</span><span style="color:#666666;">?.</span><span style="color:#80A665;">close</span><span style="color:#666666;">()</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">startVitest</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest/node</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vitest</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">await</span><span style="color:#393A34;"> </span><span style="color:#59873A;">startVitest</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">test</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">await</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vitest</span><span style="color:#999999;">?.</span><span style="color:#59873A;">close</span><span style="color:#999999;">()</span></span></code></pre></div><p><code>startVitest</code> function returns <code>Vitest</code> instance if tests can be started. It returns <code>undefined</code>, if one of the following occurs:</p><ul><li>Vitest didn&#39;t find &quot;vite&quot; package (usually installed with Vitest)</li><li>If coverage is enabled and run mode is &quot;test&quot;, but the coverage package is not installed (<code>@vitest/coverage-v8</code> or <code>@vitest/coverage-istanbul</code>)</li><li>If the environment package is not installed (<code>jsdom</code>/<code>happy-dom</code>/<code>@edge-runtime/vm</code>)</li></ul><p>If <code>undefined</code> is returned or tests failed during the run, Vitest sets <code>process.exitCode</code> to <code>1</code>.</p><p>If watch mode is not enabled, Vitest will call <code>close</code> method.</p><p>If watch mode is enabled and the terminal supports TTY, Vitest will register console shortcuts.</p><p>You can pass down a list of filters as a second argument. Vitest will run only tests that contain at least one of the passed-down strings in their file path.</p><p>Additionally, you can use the third argument to pass in CLI arguments, which will override any test config options.</p><p>Alternatively, you can pass in the complete Vite config as the fourth argument, which will take precedence over any other user-defined options.</p><h2 id="createvitest" tabindex="-1">createVitest <a class="header-anchor" href="#createvitest" aria-label="Permalink to &quot;createVitest&quot;">​</a></h2><p>You can create Vitest instance yourself using <code>createVitest</code> function. It returns the same <code>Vitest</code> instance as <code>startVitest</code>, but it doesn&#39;t start tests and doesn&#39;t validate installed packages.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">createVitest</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">vitest/node</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vitest</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">await</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">createVitest</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">test</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#B8A965;">watch</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">false</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">})</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createVitest</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">vitest/node</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vitest</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">await</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createVitest</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">test</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">watch</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre></div><h2 id="vitest" tabindex="-1">Vitest <a class="header-anchor" href="#vitest" aria-label="Permalink to &quot;Vitest&quot;">​</a></h2><p>Vitest instance requires the current test mode. It can be either:</p><ul><li><code>test</code> when running runtime tests</li><li><code>benchmark</code> when running benchmarks</li><li><code>typecheck</code> when running type tests</li></ul><h3 id="mode" tabindex="-1">mode <a class="header-anchor" href="#mode" aria-label="Permalink to &quot;mode&quot;">​</a></h3><h4 id="test" tabindex="-1">test <a class="header-anchor" href="#test" aria-label="Permalink to &quot;test&quot;">​</a></h4><p>Test mode will only call functions inside <code>test</code> or <code>it</code>, and throws an error when <code>bench</code> is encountered. This mode uses <code>include</code> and <code>exclude</code> options in the config to find test files.</p><h4 id="benchmark" tabindex="-1">benchmark <a class="header-anchor" href="#benchmark" aria-label="Permalink to &quot;benchmark&quot;">​</a></h4><p>Benchmark mode calls <code>bench</code> functions and throws an error, when it encounters <code>test</code> or <code>it</code>. This mode uses <code>benchmark.include</code> and <code>benchmark.exclude</code> options in the config to find benchmark files.</p><h4 id="typecheck" tabindex="-1">typecheck <a class="header-anchor" href="#typecheck" aria-label="Permalink to &quot;typecheck&quot;">​</a></h4><p>Typecheck mode doesn&#39;t <em>run</em> tests. It only analyses types and gives a summary. This mode uses <code>typecheck.include</code> and <code>typecheck.exclude</code> options in the config to find files to analyze.</p><h3 id="start" tabindex="-1">start <a class="header-anchor" href="#start" aria-label="Permalink to &quot;start&quot;">​</a></h3><p>You can start running tests or benchmarks with <code>start</code> method. You can pass an array of strings to filter test files.</p>`,28),l=[o];function p(c,r,i,d,y,h){return e(),a("div",null,l)}const m=s(t,[["render",p]]);export{A as __pageData,m as default};
